var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.437,1,1.906]],["body/controllers/AppController.html",[0,2.343,1,3.106,2,2.177,3,0.572,4,0.572,5,0.48,6,2.983,7,0.572,8,2.06,9,4.157,10,2.177,11,0.048,12,1.304,13,3.684,14,1.672,15,1.25,16,0.704,17,0.67,18,2.906,19,3.684,20,0.572,21,0.165,22,2.983,23,1.304,24,1.015,25,3.684,26,0.039,27,0.039]],["title/modules/AppModule.html",[28,1.437,29,1.646]],["body/modules/AppModule.html",[2,2.322,3,0.457,4,0.457,5,0.384,11,0.049,16,0.802,17,0.535,20,0.457,21,0.132,26,0.034,27,0.034,28,2.283,29,3.198,30,1.519,31,1.519,32,2.015,33,2.015,34,1.519,35,3.028,36,3.028,37,2.384,38,2.384,39,2.384,40,2.384,41,2.611,42,1.501,43,1.393,44,2.69,45,2.015,46,2.015,47,2.944,48,2.614,49,3.929,50,2.944,51,2.944,52,1.042,53,3.929,54,1.042,55,2.944,56,2.944,57,1.336,58,2.944,59,2.944,60,2.384,61,2.944,62,1.18]],["title/injectables/AppService.html",[18,1.646,63,0.506]],["body/injectables/AppService.html",[3,0.596,4,0.596,5,0.5,7,0.596,8,2.112,9,4.216,11,0.048,12,1.359,14,1.742,15,1.282,16,0.596,17,0.698,18,2.749,20,0.596,21,0.172,24,1.057,26,0.04,27,0.04,63,0.846,64,1.981,65,3.108,66,3.838,67,3.838,68,3.838]],["title/classes/CoordinatesDto.html",[21,0.125,69,1.646]],["body/classes/CoordinatesDto.html",[3,0.469,4,0.469,5,0.394,7,0.469,10,2.363,11,0.049,12,1.416,15,0.833,16,0.696,20,0.469,21,0.214,26,0.034,27,0.034,69,3.012,70,2.069,71,2.069,72,0.966,73,1.551,74,1.551,75,1.198,76,1.689,77,4.017,78,3.023,79,3.023,80,3.239,81,3.239,82,3.63,83,3.63,84,1.786,85,2.069,86,3.863,87,1.786,88,0.833,89,3.068,90,2.448,91,2.448,92,0.945,93,2.448,94,2.448,95,0.73,96,2.448,97,2.448,98,0.73]],["title/interfaces/Destination.html",[98,0.673,99,0.767]],["body/interfaces/Destination.html",[3,0.289,4,0.532,5,0.243,7,0.289,11,0.049,15,1.241,16,0.673,17,0.338,20,0.439,21,0.084,23,1.355,24,0.943,26,0.024,27,0.024,42,0.779,43,0.512,52,0.659,54,0.659,57,0.845,62,0.745,63,0.515,72,0.683,73,1.409,74,1.409,75,0.924,76,1.771,88,0.779,92,1.197,95,0.827,98,0.994,99,1.054,100,0.96,101,0.845,102,0.845,103,1.555,104,1.555,105,0.943,106,0.96,107,1.134,108,1.355,109,1.533,110,0.845,111,1.806,112,0.845,113,0.96,114,0.745,115,0.96,116,1.461,117,0.96,118,0.845,119,0.96,120,0.96,121,1.002,122,0.96,123,0.96,124,1.65,125,0.96,126,0.96,127,1.461,128,1.461,129,1.461,130,1.535,131,0.96,132,1.461,133,1.555,134,1.461,135,0.96,136,0.96,137,0.96,138,0.845,139,1.975,140,1.285,141,1.975,142,0.96,143,0.96,144,0.96,145,0.96,146,0.845,147,0.96,148,0.96,149,0.845,150,0.96,151,0.96,152,0.96,153,1.768,154,1.285,155,0.96,156,0.845,157,0.745,158,1.285,159,1.737,160,1.737,161,1.285,162,1.861,163,1.285,164,1.285,165,0.96,166,1.768,167,1.461,168,1.461,169,0.845,170,0.845,171,0.845,172,0.659,173,0.659,174,0.659,175,0.659,176,0.582,177,0.659,178,0.659,179,0.845,180,0.96,181,0.96,182,0.96,183,0.845,184,0.96]],["title/controllers/GeoController.html",[0,1.437,48,1.646]],["body/controllers/GeoController.html",[0,1.498,2,1.714,3,0.45,4,0.45,5,0.378,7,0.45,8,1.767,10,1.714,11,0.048,12,1.027,14,1.317,16,0.728,17,0.528,20,0.45,21,0.13,22,2.35,23,1.027,24,1.072,26,0.033,27,0.033,43,1.209,48,2.3,75,0.701,87,1.714,88,1.292,102,1.317,109,1.559,121,1.555,130,1.027,133,1.317,156,1.767,157,1.163,172,1.027,173,1.027,174,1.027,175,1.027,176,0.907,177,1.027,178,1.027,183,1.767,185,2.35,186,2.901,187,3.892,188,2.901,189,2.901,190,3.892,191,2.901,192,3.892,193,3.212,194,3.8,195,3.556,196,3.892,197,2.901,198,3.892,199,3.892,200,2.901,201,1.986,202,1.986,203,1.986,204,3.151,205,2.901,206,2.901,207,3.892,208,4.391,209,2.901,210,2.901,211,2.901,212,2.901,213,2.901]],["title/injectables/GeoService.html",[43,0.767,63,0.506]],["body/injectables/GeoService.html",[3,0.252,4,0.6,5,0.212,7,0.252,8,1.157,11,0.049,12,1.37,14,1.157,15,1.397,16,0.637,17,0.295,20,0.396,21,0.073,23,1.261,24,0.866,26,0.022,27,0.022,42,0.981,43,0.702,52,0.575,54,0.575,57,0.737,62,0.651,63,0.463,64,0.838,72,0.615,73,1.113,74,1.113,75,1.073,76,1.618,88,0.981,92,1.283,95,0.759,98,0.86,99,0.981,101,0.737,102,0.737,103,1.948,104,1.948,105,1.13,106,0.838,107,1.021,108,1.261,109,1.427,110,0.737,111,1.968,112,1.427,113,1.623,114,1.021,115,1.623,116,1.315,117,0.838,118,0.737,119,0.838,120,0.838,121,1.453,122,1.315,123,1.315,124,1.55,125,0.838,126,0.838,127,1.315,128,1.315,129,1.315,130,1.453,131,0.838,132,1.315,133,1.427,134,1.315,135,0.838,136,0.838,137,0.838,138,0.737,139,1.838,140,1.157,141,2.119,142,0.838,143,0.838,144,0.838,145,0.838,146,0.737,147,0.838,148,0.838,149,0.737,150,0.838,151,0.838,152,0.838,153,1.623,154,1.157,155,0.838,156,1.157,157,0.651,158,1.157,159,1.616,160,1.616,161,1.157,162,1.78,163,1.157,164,1.157,165,0.838,166,1.623,167,1.315,168,1.315,169,0.737,170,0.737,171,0.737,172,0.575,173,0.575,174,0.575,175,0.575,176,0.508,177,0.575,178,0.575,179,0.737,180,1.623,181,0.838,182,0.838,183,0.737,184,0.838,201,2.152,202,2.152,203,2.152,214,2.548,215,1.624,216,2.548,217,1.624,218,1.624,219,1.624,220,1.624]],["title/classes/LocationDto.html",[21,0.125,88,0.767]],["body/classes/LocationDto.html",[3,0.45,4,0.45,5,0.378,7,0.45,10,2.595,11,0.049,12,1.555,15,1.072,16,0.682,20,0.45,21,0.211,26,0.033,27,0.033,69,3.041,70,1.986,71,1.986,72,0.94,73,1.373,74,1.373,75,1.217,76,1.378,77,3.556,80,3.151,81,3.151,82,3.556,83,3.556,84,1.714,85,1.986,86,3.8,87,1.714,88,1.072,89,3.006,90,3.151,91,2.35,92,1.373,93,2.35,94,2.35,95,1.061,96,2.35,97,2.35,98,1.061,221,4.391,222,3.892,223,2.901,224,2.901,225,2.901,226,2.901]],["title/interfaces/Origin.html",[95,0.673,99,0.767]],["body/interfaces/Origin.html",[3,0.289,4,0.532,5,0.243,7,0.289,11,0.049,15,1.241,16,0.673,17,0.338,20,0.439,21,0.084,23,1.355,24,0.943,26,0.024,27,0.024,42,0.779,43,0.512,52,0.659,54,0.659,57,0.845,62,0.745,63,0.515,72,0.683,73,1.409,74,1.409,75,0.924,76,1.771,88,0.779,92,1.197,95,0.924,98,0.924,99,1.054,100,0.96,101,0.845,102,0.845,103,1.555,104,1.555,105,0.943,106,0.96,107,1.134,108,1.355,109,1.533,110,0.845,111,1.806,112,0.845,113,0.96,114,0.745,115,0.96,116,1.461,117,0.96,118,0.845,119,0.96,120,0.96,121,1.002,122,0.96,123,0.96,124,1.65,125,0.96,126,0.96,127,1.461,128,1.461,129,1.461,130,1.535,131,0.96,132,1.461,133,1.555,134,1.461,135,0.96,136,0.96,137,0.96,138,0.845,139,1.975,140,1.285,141,1.975,142,0.96,143,0.96,144,0.96,145,0.96,146,0.845,147,0.96,148,0.96,149,0.845,150,0.96,151,0.96,152,0.96,153,1.768,154,1.285,155,0.96,156,0.845,157,0.745,158,1.285,159,1.737,160,1.737,161,1.285,162,1.861,163,1.285,164,1.285,165,0.96,166,1.768,167,1.461,168,1.461,169,0.845,170,0.845,171,0.845,172,0.659,173,0.659,174,0.659,175,0.659,176,0.582,177,0.659,178,0.659,179,0.845,180,0.96,181,0.96,182,0.96,183,0.845,184,0.96]],["title/modules/RedisModule.html",[28,1.437,41,1.437]],["body/modules/RedisModule.html",[3,0.544,4,0.544,5,0.457,11,0.047,16,0.683,17,0.637,20,0.544,21,0.157,26,0.038,27,0.038,28,2.482,30,1.809,31,1.809,32,2.399,33,2.399,34,1.809,35,3.292,36,3.292,41,2.778,44,3.012,45,2.399,46,2.399,105,1.539,227,2.838,228,2.838,229,2.838,230,3.505,231,4.4,232,3.505]],["title/injectables/RedisService.html",[63,0.506,105,0.767]],["body/injectables/RedisService.html",[3,0.415,4,0.415,5,0.348,7,0.415,8,1.67,11,0.048,12,1.606,14,1.67,16,0.571,17,0.486,20,0.415,21,0.12,24,0.736,26,0.031,27,0.031,63,0.669,64,1.379,72,0.889,75,0.645,105,1.013,111,1.686,114,1.686,121,1.49,124,1.474,130,0.946,149,2.059,162,1.474,172,1.49,173,1.49,174,1.49,175,1.49,176,1.575,177,1.783,178,1.783,179,1.67,233,2.163,234,4.208,235,4.916,236,3.679,237,2.671,238,3.365,239,2.671,240,2.163,241,2.671,242,3.679,243,2.671,244,2.671,245,3.679,246,2.671,247,2.671,248,2.671,249,4.208,250,3.679,251,1.829,252,3.679,253,3.679,254,2.671,255,3.679,256,2.671,257,2.671]],["title/interfaces/Route.html",[99,0.767,108,0.986]],["body/interfaces/Route.html",[3,0.289,4,0.532,5,0.243,7,0.289,11,0.049,15,1.241,16,0.673,17,0.338,20,0.439,21,0.084,23,1.355,24,0.943,26,0.024,27,0.024,42,0.779,43,0.512,52,0.659,54,0.659,57,0.845,62,0.745,63,0.515,72,0.683,73,1.409,74,1.409,75,0.924,76,1.771,88,0.779,92,1.197,95,0.827,98,0.924,99,1.054,100,0.96,101,0.845,102,0.845,103,1.555,104,1.555,105,0.943,106,0.96,107,1.134,108,1.458,109,1.533,110,0.845,111,1.806,112,0.845,113,0.96,114,0.745,115,0.96,116,1.461,117,0.96,118,0.845,119,0.96,120,0.96,121,1.002,122,0.96,123,0.96,124,1.65,125,0.96,126,0.96,127,1.461,128,1.461,129,1.461,130,1.535,131,0.96,132,1.461,133,1.555,134,1.461,135,0.96,136,0.96,137,0.96,138,0.845,139,1.975,140,1.285,141,1.975,142,0.96,143,0.96,144,0.96,145,0.96,146,0.845,147,0.96,148,0.96,149,0.845,150,0.96,151,0.96,152,0.96,153,1.768,154,1.285,155,0.96,156,0.845,157,0.745,158,1.285,159,1.737,160,1.737,161,1.285,162,1.861,163,1.285,164,1.285,165,0.96,166,1.768,167,1.461,168,1.461,169,0.845,170,0.845,171,0.845,172,0.659,173,0.659,174,0.659,175,0.659,176,0.582,177,0.659,178,0.659,179,0.845,180,0.96,181,0.96,182,0.96,183,0.845,184,0.96]],["title/interfaces/RoutingResonceZ.html",[99,0.767,107,1.116]],["body/interfaces/RoutingResonceZ.html",[3,0.275,4,0.515,5,0.231,7,0.275,11,0.049,15,1.342,16,0.66,17,0.322,20,0.423,21,0.079,23,1.32,24,0.914,26,0.023,27,0.023,42,0.75,43,0.487,52,0.626,54,0.626,57,0.803,62,0.709,63,0.495,72,0.658,73,1.166,74,1.166,75,1.104,76,1.695,88,0.75,92,1.385,95,1.104,98,1.133,99,1.027,100,0.913,101,0.803,102,0.803,103,1.507,104,1.507,105,0.914,106,0.913,107,1.33,108,1.66,109,1.774,110,1.692,111,1.774,112,0.803,113,0.913,114,0.709,115,0.913,116,1.406,117,0.913,118,0.803,119,0.913,120,0.913,121,0.964,122,0.913,123,0.913,124,1.613,125,0.913,126,0.913,127,1.406,128,1.406,129,1.406,130,1.505,131,0.913,132,1.406,133,1.507,134,1.406,135,0.913,136,0.913,137,0.913,138,0.803,139,1.924,140,1.236,141,1.924,142,0.913,143,0.913,144,0.913,145,0.913,146,0.803,147,0.913,148,0.913,149,0.803,150,0.913,151,0.913,152,0.913,153,1.714,154,1.236,155,0.913,156,0.803,157,0.709,158,1.236,159,1.692,160,1.692,161,1.236,162,1.832,163,1.236,164,1.236,165,0.913,166,1.714,167,1.406,168,1.406,169,0.803,170,0.803,171,0.803,172,0.626,173,0.626,174,0.626,175,0.626,176,0.553,177,0.626,178,0.626,179,0.803,180,0.913,181,0.913,182,0.913,183,0.803,184,0.913]],["title/injectables/RoutingServiceClient.html",[42,0.767,63,0.506]],["body/injectables/RoutingServiceClient.html",[3,0.399,4,0.399,5,0.335,7,0.399,8,1.626,11,0.049,12,1.46,14,1.167,15,1.135,16,0.64,17,0.467,20,0.399,21,0.115,23,1.661,24,0.986,26,0.031,27,0.031,42,0.986,52,0.91,54,0.91,63,0.651,64,1.326,72,0.865,73,1.12,74,1.12,75,1.133,76,1.579,92,0.803,95,0.621,98,0.621,103,2.205,104,2.262,111,1.879,114,1.435,121,1.46,124,1.435,130,0.91,140,1.167,146,1.626,154,1.167,157,1.03,158,1.167,159,1.626,160,1.626,161,1.167,162,1.652,163,1.167,164,1.167,172,0.91,173,0.91,174,0.91,175,0.91,176,0.803,177,0.91,178,0.91,201,2.452,202,2.452,203,2.452,251,1.759,258,2.081,259,4.123,260,3.581,261,2.57,262,3.581,263,3.581,264,3.581,265,2.57,266,2.57,267,2.57,268,2.57,269,2.57,270,2.57,271,2.57,272,2.57,273,2.57]],["title/coverage.html",[274,3.065]],["body/coverage.html",[0,2.145,1,2.194,5,0.418,6,2.595,11,0.048,18,1.894,21,0.187,26,0.036,27,0.036,34,1.654,42,0.883,43,0.883,48,1.894,63,0.887,65,2.595,69,1.894,71,2.845,75,0.774,88,0.883,95,0.774,98,0.774,99,1.344,101,2.295,105,0.883,107,1.284,108,1.135,185,2.595,233,2.595,251,2.194,258,2.595,274,2.595,275,2.595,276,3.205,277,3.205,278,5.548,279,4.612,280,4.156,281,3.205,282,4.879,283,3.205,284,2.595,285,3.205,286,3.205,287,3.205,288,3.205,289,3.205]],["title/dependencies.html",[31,1.727,290,1.889]],["body/dependencies.html",[11,0.049,17,0.67,21,0.204,26,0.039,27,0.039,31,1.902,52,1.304,54,1.304,84,2.177,85,2.521,87,2.177,238,2.521,240,2.983,291,3.684,292,4.918,293,3.684,294,3.684,295,3.684,296,4.538,297,3.684,298,3.684,299,3.684,300,3.684,301,3.684,302,3.684,303,3.684,304,3.684,305,3.684,306,3.684,307,2.983,308,2.983,309,3.684]],["title/miscellaneous/functions.html",[310,1.889,311,2.709]],["body/miscellaneous/functions.html",[7,0.664,11,0.042,26,0.042,27,0.042,34,2.706,284,3.462,310,3.462,311,3.462,312,4.276]],["title/index.html",[7,0.362,313,2.333,314,2.333]],["body/index.html",[11,0.047,21,0.089,26,0.026,27,0.026,60,1.613,62,0.798,73,1.326,74,1.326,84,1.177,89,3.247,92,0.932,95,0.72,98,0.72,108,1.055,109,1.194,110,0.904,112,0.904,118,0.904,138,1.621,169,1.353,170,0.904,171,0.904,176,0.623,193,1.364,194,2.413,195,1.613,204,2.413,238,1.364,275,1.613,307,2.413,308,2.413,315,1.992,316,1.992,317,1.992,318,2.98,319,2.98,320,5.181,321,1.992,322,1.992,323,2.98,324,1.992,325,2.98,326,1.992,327,1.992,328,1.992,329,1.992,330,1.992,331,3.962,332,1.992,333,1.992,334,4.241,335,1.992,336,1.992,337,1.992,338,3.57,339,1.992,340,3.57,341,1.992,342,1.992,343,1.992,344,1.992,345,1.992,346,1.992,347,4.241,348,1.992,349,1.992,350,1.992,351,1.992,352,1.992,353,1.992,354,1.992,355,1.992,356,1.992,357,1.992,358,1.992,359,4.613,360,1.992,361,1.992,362,1.992,363,1.992,364,1.992,365,1.992,366,1.992,367,3.962,368,1.992,369,1.992,370,1.992,371,1.992,372,1.992,373,1.992,374,1.992,375,1.992,376,1.992,377,1.992,378,4.613,379,2.98,380,1.992,381,1.992,382,1.992,383,2.98,384,1.992,385,1.992,386,1.992,387,1.992,388,1.992,389,1.992,390,1.992,391,1.992,392,1.992,393,1.992,394,1.992,395,1.992,396,1.992,397,1.992,398,1.992,399,1.992,400,2.98,401,1.992,402,1.992,403,4.45,404,1.992,405,1.992,406,1.992,407,2.98,408,1.992,409,1.992,410,1.992,411,1.992,412,1.992,413,1.992,414,1.992,415,1.992,416,1.992,417,2.98,418,1.992,419,1.992,420,1.992,421,1.992,422,1.992,423,1.992,424,1.992,425,1.992,426,1.992,427,1.992,428,1.992,429,1.992,430,3.57,431,2.98,432,1.992,433,1.992,434,1.992,435,1.992,436,1.992,437,1.992,438,1.992,439,1.992,440,1.992,441,1.992,442,3.57,443,2.98,444,1.992,445,1.992,446,1.992,447,1.992]],["title/modules.html",[30,1.954]],["body/modules.html",[11,0.042,26,0.042,27,0.042,29,2.495,30,2.179,41,2.179,448,4.925,449,4.925,450,4.925,451,4.925]],["title/overview.html",[452,3.065]],["body/overview.html",[2,2.022,11,0.046,26,0.037,27,0.037,28,1.766,29,3.231,30,1.766,31,1.766,32,2.342,33,2.342,34,1.766,35,2.342,36,2.342,37,2.771,38,2.771,39,2.771,40,2.771,41,2.72,42,1.474,43,1.31,44,2.966,45,2.342,46,2.342,64,1.766,70,2.342,100,1.766,105,1.474,227,2.771,228,2.771,229,2.771,452,2.771,453,4.756,454,4.334]],["title/properties.html",[72,0.808,290,1.889]],["body/properties.html",[11,0.047,26,0.042,27,0.042,72,1.02,193,2.89,455,4.222,456,4.222,457,4.222,458,4.222,459,4.222]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":278,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":456,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":299,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":304,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":298,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":286,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":279,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":282,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":280,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":287,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":281,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":283,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":248,"title":{},"body":{"injectables/RedisService.html":{}}}],["10.1225",{"_index":421,"title":{},"body":{"index.html":{}}}],["11.0.1",{"_index":292,"title":{},"body":{"dependencies.html":{}}}],["11.1.4",{"_index":297,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":453,"title":{},"body":{"overview.html":{}}}],["201",{"_index":192,"title":{},"body":{"controllers/GeoController.html":{}}}],["22.1225",{"_index":426,"title":{},"body":{"index.html":{}}}],["223",{"_index":417,"title":{},"body":{"index.html":{}}}],["300",{"_index":118,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["322",{"_index":91,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["322'})@isstring()@isnotempty",{"_index":224,"title":{},"body":{"classes/LocationDto.html":{}}}],["38.8225",{"_index":428,"title":{},"body":{"index.html":{}}}],["4",{"_index":454,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":291,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":293,"title":{},"body":{"dependencies.html":{}}}],["4.1225",{"_index":420,"title":{},"body":{"index.html":{}}}],["4.123",{"_index":93,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["4.567",{"_index":96,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["4.7.0",{"_index":301,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":198,"title":{},"body":{"controllers/GeoController.html":{}}}],["49.1225",{"_index":427,"title":{},"body":{"index.html":{}}}],["5",{"_index":348,"title":{},"body":{"index.html":{}}}],["5.0.1",{"_index":309,"title":{},"body":{"dependencies.html":{}}}],["5.5225",{"_index":418,"title":{},"body":{"index.html":{}}}],["5.6.1",{"_index":300,"title":{},"body":{"dependencies.html":{}}}],["55.5225",{"_index":424,"title":{},"body":{"index.html":{}}}],["6379",{"_index":247,"title":{},"body":{"injectables/RedisService.html":{}}}],["67.1725",{"_index":429,"title":{},"body":{"index.html":{}}}],["7.8.1",{"_index":306,"title":{},"body":{"dependencies.html":{}}}],["74.123",{"_index":94,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["74.567",{"_index":97,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["8.2225",{"_index":419,"title":{},"body":{"index.html":{}}}],["85.2225",{"_index":425,"title":{},"body":{"index.html":{}}}],["access",{"_index":253,"title":{},"body":{"injectables/RedisService.html":{}}}],["actúa",{"_index":337,"title":{},"body":{"index.html":{}}}],["al",{"_index":166,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["alert",{"_index":439,"title":{},"body":{"index.html":{}}}],["alerta",{"_index":184,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["alerts",{"_index":413,"title":{},"body":{"index.html":{}}}],["almacena",{"_index":346,"title":{},"body":{"index.html":{}}}],["api",{"_index":367,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":207,"title":{},"body":{"controllers/GeoController.html":{}}}],["apiproperty",{"_index":86,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["apiproperty({example",{"_index":221,"title":{},"body":{"classes/LocationDto.html":{}}}],["apiresponse",{"_index":208,"title":{},"body":{"controllers/GeoController.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["archivo",{"_index":386,"title":{},"body":{"index.html":{}}}],["arquitectura",{"_index":329,"title":{},"body":{"index.html":{}}}],["assignment",{"_index":179,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["async",{"_index":121,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["audit",{"_index":412,"title":{},"body":{"index.html":{}}}],["audit_service_url=http://audit",{"_index":397,"title":{},"body":{"index.html":{}}}],["auditoría",{"_index":321,"title":{},"body":{"index.html":{}}}],["auditurl",{"_index":113,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["author",{"_index":459,"title":{},"body":{"properties.html":{}}}],["await",{"_index":130,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["azd",{"_index":416,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":259,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["body",{"_index":205,"title":{},"body":{"controllers/GeoController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":451,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":448,"title":{},"body":{"modules.html":{}}}],["cachettl",{"_index":110,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["calcular",{"_index":167,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["calculateroute",{"_index":260,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["calculateroute(payload",{"_index":263,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["call",{"_index":249,"title":{},"body":{"injectables/RedisService.html":{}}}],["características",{"_index":342,"title":{},"body":{"index.html":{}}}],["catch",{"_index":158,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["class",{"_index":21,"title":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":70,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"overview.html":{}}}],["client",{"_index":234,"title":{},"body":{"injectables/RedisService.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_exports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_redismodule",{"_index":227,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":228,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":229,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cobertura",{"_index":446,"title":{},"body":{"index.html":{}}}],["common/http/routing.service",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["compodoc",{"_index":433,"title":{},"body":{"index.html":{}}}],["compose",{"_index":380,"title":{},"body":{"index.html":{}}}],["con",{"_index":340,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":104,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["console.error('error",{"_index":182,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["console.error('redis",{"_index":256,"title":{},"body":{"injectables/RedisService.html":{}}}],["const",{"_index":124,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["constructor",{"_index":114,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["constructor(httpservice",{"_index":261,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/GeoController.html":{}}}],["constructor(redisservice",{"_index":215,"title":{},"body":{"injectables/GeoService.html":{}}}],["construido",{"_index":339,"title":{},"body":{"index.html":{}}}],["consulta",{"_index":415,"title":{},"body":{"index.html":{}}}],["containerizada",{"_index":382,"title":{},"body":{"index.html":{}}}],["control",{"_index":335,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/GeoController.html":{}},"body":{"controllers/AppController.html":{},"controllers/GeoController.html":{},"coverage.html":{}}}],["controller('geo",{"_index":209,"title":{},"body":{"controllers/GeoController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/GeoController.html":{},"overview.html":{}}}],["coordenada",{"_index":361,"title":{},"body":{"index.html":{}}}],["coordinatesdto",{"_index":69,"title":{"classes/CoordinatesDto.html":{}},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"coverage.html":{}}}],["correctamente",{"_index":211,"title":{},"body":{"controllers/GeoController.html":{}}}],["correctamente.'})@apiresponse({status",{"_index":197,"title":{},"body":{"controllers/GeoController.html":{}}}],["coverage",{"_index":274,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crear",{"_index":385,"title":{},"body":{"index.html":{}}}],["data",{"_index":170,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["datos",{"_index":194,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{}}}],["de",{"_index":320,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"classes/LocationDto.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["del",{"_index":388,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desconocido",{"_index":164,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["description",{"_index":193,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":98,"title":{"interfaces/Destination.html":{}},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"index.html":{}}}],["detectado",{"_index":137,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["detected",{"_index":135,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["development",{"_index":404,"title":{},"body":{"index.html":{}}}],["deviceid",{"_index":92,"title":{},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["disable",{"_index":173,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["disponible",{"_index":431,"title":{},"body":{"index.html":{}}}],["docker",{"_index":379,"title":{},"body":{"index.html":{}}}],["documentación",{"_index":430,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":275,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["download",{"_index":399,"title":{},"body":{"index.html":{}}}],["dto",{"_index":156,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["dto.destination",{"_index":147,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["dto.deviceid",{"_index":139,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["dto.origin.lat",{"_index":127,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["dto.origin.lng",{"_index":128,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["dtos",{"_index":366,"title":{},"body":{"index.html":{}}}],["duplicación",{"_index":352,"title":{},"body":{"index.html":{}}}],["duplicado",{"_index":136,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["duplicados",{"_index":355,"title":{},"body":{"index.html":{}}}],["duplicate",{"_index":134,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["e",{"_index":159,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["e.message",{"_index":163,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["ejecutar",{"_index":443,"title":{},"body":{"index.html":{}}}],["ejemplos",{"_index":440,"title":{},"body":{"index.html":{}}}],["el",{"_index":322,"title":{},"body":{"index.html":{}}}],["en",{"_index":347,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":411,"title":{},"body":{"index.html":{}}}],["entorno",{"_index":384,"title":{},"body":{"index.html":{}}}],["env",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["envfilepath",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["envía",{"_index":358,"title":{},"body":{"index.html":{}}}],["err",{"_index":255,"title":{},"body":{"injectables/RedisService.html":{}}}],["error",{"_index":162,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["error(`routing",{"_index":273,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["errormessage",{"_index":160,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["eslint",{"_index":172,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["eslint/no",{"_index":177,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["est",{"_index":338,"title":{},"body":{"index.html":{}}}],["este",{"_index":324,"title":{},"body":{"index.html":{}}}],["evitar",{"_index":353,"title":{},"body":{"index.html":{}}}],["ex",{"_index":152,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["example",{"_index":89,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"index.html":{}}}],["existe",{"_index":143,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["exists",{"_index":129,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["express",{"_index":296,"title":{},"body":{"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["flotas",{"_index":336,"title":{},"body":{"index.html":{}}}],["forma",{"_index":326,"title":{},"body":{"index.html":{}}}],["framework",{"_index":316,"title":{},"body":{"index.html":{}}}],["function",{"_index":285,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":311,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gad",{"_index":423,"title":{},"body":{"index.html":{}}}],["geo",{"_index":133,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["geo.service",{"_index":206,"title":{},"body":{"controllers/GeoController.html":{}}}],["geo/geo.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["geo/geo.service",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["geocontroller",{"_index":48,"title":{"controllers/GeoController.html":{}},"body":{"modules/AppModule.html":{},"controllers/GeoController.html":{},"coverage.html":{}}}],["geolocalización",{"_index":323,"title":{},"body":{"index.html":{}}}],["geolocatión",{"_index":190,"title":{},"body":{"controllers/GeoController.html":{}}}],["geoparámetros",{"_index":414,"title":{},"body":{"index.html":{}}}],["geoservice",{"_index":43,"title":{"injectables/GeoService.html":{}},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{},"overview.html":{}}}],["getclient",{"_index":149,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":313,"title":{"index.html":{}},"body":{}}],["global",{"_index":231,"title":{},"body":{"modules/RedisModule.html":{}}}],["gps",{"_index":195,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{}}}],["gps'})@apiresponse({status",{"_index":191,"title":{},"body":{"controllers/GeoController.html":{}}}],["gps:${dto.deviceid",{"_index":126,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["handlegpsdata",{"_index":187,"title":{},"body":{"controllers/GeoController.html":{}}}],["handlegpsdata(@body",{"_index":212,"title":{},"body":{"controllers/GeoController.html":{}}}],["handlegpsdata(dto",{"_index":188,"title":{},"body":{"controllers/GeoController.html":{}}}],["hello",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":242,"title":{},"body":{"injectables/RedisService.html":{}}}],["http",{"_index":344,"title":{},"body":{"index.html":{}}}],["http://localhost:3001/api/docs",{"_index":432,"title":{},"body":{"index.html":{}}}],["http://localhost:3001/docs",{"_index":434,"title":{},"body":{"index.html":{}}}],["httpmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["httpservice",{"_index":103,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["identifier",{"_index":276,"title":{},"body":{"coverage.html":{}}}],["implementar",{"_index":350,"title":{},"body":{"index.html":{}}}],["implements",{"_index":241,"title":{},"body":{"injectables/RedisService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["imports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["incluye",{"_index":435,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["injectable",{"_index":63,"title":{"injectables/AppService.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}},"body":{"injectables/AppService.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["injectables",{"_index":64,"title":{},"body":{"injectables/AppService.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"overview.html":{}}}],["installcompile",{"_index":402,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":161,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["interface",{"_index":99,"title":{"interfaces/Destination.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{}}}],["interfaces",{"_index":100,"title":{},"body":{"interfaces/Destination.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"overview.html":{}}}],["inválidos",{"_index":199,"title":{},"body":{"controllers/GeoController.html":{}}}],["ioredis",{"_index":240,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{}}}],["isglobal",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":80,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["isnumber",{"_index":77,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["isobject",{"_index":82,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["isstring",{"_index":81,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["jjw",{"_index":90,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["json.stringify(payload",{"_index":151,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["key",{"_index":125,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["la",{"_index":359,"title":{},"body":{"index.html":{}}}],["las",{"_index":390,"title":{},"body":{"index.html":{}}}],["lat",{"_index":73,"title":{},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["license",{"_index":457,"title":{},"body":{"properties.html":{}}}],["line",{"_index":175,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["literal",{"_index":264,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["lng",{"_index":74,"title":{},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["localhost",{"_index":244,"title":{},"body":{"injectables/RedisService.html":{}}}],["location.dto",{"_index":102,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["locationdto",{"_index":88,"title":{"classes/LocationDto.html":{}},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{}}}],["los",{"_index":345,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mecanismo",{"_index":351,"title":{},"body":{"index.html":{}}}],["mediante",{"_index":365,"title":{},"body":{"index.html":{}}}],["member",{"_index":252,"title":{},"body":{"injectables/RedisService.html":{}}}],["message",{"_index":141,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["metadata",{"_index":303,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["microservicio",{"_index":319,"title":{},"body":{"index.html":{}}}],["microservicios",{"_index":330,"title":{},"body":{"index.html":{}}}],["minutos",{"_index":349,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":310,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["misma",{"_index":360,"title":{},"body":{"index.html":{}}}],["mode",{"_index":407,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["monitoreo",{"_index":333,"title":{},"body":{"index.html":{}}}],["módulo",{"_index":438,"title":{},"body":{"index.html":{}}}],["múltiples",{"_index":362,"title":{},"body":{"index.html":{}}}],["name",{"_index":202,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["nest",{"_index":315,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":341,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":294,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":295,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":87,"title":{},"body":{"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"classes/LocationDto.html":{},"dependencies.html":{}}}],["new",{"_index":251,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["next",{"_index":174,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["node.js",{"_index":374,"title":{},"body":{"index.html":{}}}],["npm",{"_index":378,"title":{},"body":{"index.html":{}}}],["number",{"_index":76,"title":{},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["o",{"_index":376,"title":{},"body":{"index.html":{}}}],["onmoduledestroy",{"_index":235,"title":{},"body":{"injectables/RedisService.html":{}}}],["optional",{"_index":203,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["origin",{"_index":95,"title":{"interfaces/Origin.html":{}},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"index.html":{}}}],["orm",{"_index":372,"title":{},"body":{"index.html":{}}}],["out",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["overview",{"_index":452,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":290,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":138,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["parameters",{"_index":201,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["parseint(process.env.redis_port",{"_index":246,"title":{},"body":{"injectables/RedisService.html":{}}}],["parte",{"_index":327,"title":{},"body":{"index.html":{}}}],["payload",{"_index":146,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["payloads",{"_index":441,"title":{},"body":{"index.html":{}}}],["persistencia",{"_index":368,"title":{},"body":{"index.html":{}}}],["por",{"_index":437,"title":{},"body":{"index.html":{}}}],["port",{"_index":245,"title":{},"body":{"injectables/RedisService.html":{}}}],["port=3001",{"_index":394,"title":{},"body":{"index.html":{}}}],["post",{"_index":204,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{}}}],["post()@apioperation({summary",{"_index":189,"title":{},"body":{"controllers/GeoController.html":{}}}],["postgresql",{"_index":369,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":186,"title":{},"body":{"controllers/GeoController.html":{}}}],["prisma",{"_index":371,"title":{},"body":{"index.html":{}}}],["private",{"_index":111,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["process.env.redis_host",{"_index":243,"title":{},"body":{"injectables/RedisService.html":{}}}],["processgps",{"_index":214,"title":{},"body":{"injectables/GeoService.html":{}}}],["processgps(dto",{"_index":122,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["production",{"_index":409,"title":{},"body":{"index.html":{}}}],["project",{"_index":400,"title":{},"body":{"index.html":{}}}],["promise",{"_index":123,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["properties",{"_index":72,"title":{"properties.html":{}},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["proyecto",{"_index":389,"title":{},"body":{"index.html":{}}}],["pruebas",{"_index":442,"title":{},"body":{"index.html":{}}}],["raíz",{"_index":387,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["recibe",{"_index":343,"title":{},"body":{"index.html":{}}}],["reciente",{"_index":145,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["redis",{"_index":238,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{},"index.html":{}}}],["redis.service",{"_index":232,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis/redis.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["redis/redis.service",{"_index":106,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["redis_host=redis",{"_index":392,"title":{},"body":{"index.html":{}}}],["redis_port=6379",{"_index":393,"title":{},"body":{"index.html":{}}}],["redismodule",{"_index":41,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisservice",{"_index":105,"title":{"injectables/RedisService.html":{}},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{},"overview.html":{}}}],["reflect",{"_index":302,"title":{},"body":{"dependencies.html":{}}}],["registeralert",{"_index":180,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["registeralert(type",{"_index":218,"title":{},"body":{"injectables/GeoService.html":{}}}],["registrados",{"_index":196,"title":{},"body":{"controllers/GeoController.html":{}}}],["registrar",{"_index":183,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["registros",{"_index":354,"title":{},"body":{"index.html":{}}}],["repository",{"_index":318,"title":{},"body":{"index.html":{}}}],["requisitos",{"_index":373,"title":{},"body":{"index.html":{}}}],["reset",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["response",{"_index":268,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["response.data",{"_index":271,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["respuesta",{"_index":422,"title":{},"body":{"index.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["route",{"_index":108,"title":{"interfaces/Route.html":{}},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{},"index.html":{}}}],["routeresult",{"_index":153,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["routing",{"_index":165,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["routing_service_url=http://routing",{"_index":395,"title":{},"body":{"index.html":{}}}],["routingclient",{"_index":115,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["routingresoncez",{"_index":107,"title":{"interfaces/RoutingResonceZ.html":{}},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{}}}],["routingserviceclient",{"_index":42,"title":{"injectables/RoutingServiceClient.html":{}},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":403,"title":{},"body":{"index.html":{}}}],["ruta",{"_index":168,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["rxjs",{"_index":305,"title":{},"body":{"dependencies.html":{}}}],["saved",{"_index":171,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["service",{"_index":140,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["service:3002",{"_index":396,"title":{},"body":{"index.html":{}}}],["service:3003",{"_index":398,"title":{},"body":{"index.html":{}}}],["servicio",{"_index":325,"title":{},"body":{"index.html":{}}}],["set(key",{"_index":150,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["setup",{"_index":401,"title":{},"body":{"index.html":{}}}],["si",{"_index":356,"title":{},"body":{"index.html":{}}}],["siguientes",{"_index":391,"title":{},"body":{"index.html":{}}}],["sistema",{"_index":332,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["src/.../main.ts",{"_index":312,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/http/routing.service.ts",{"_index":258,"title":{},"body":{"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["src/common/http/routing.service.ts:16",{"_index":265,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["src/common/http/routing.service.ts:7",{"_index":262,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["src/geo/geo.controller.ts",{"_index":185,"title":{},"body":{"controllers/GeoController.html":{},"coverage.html":{}}}],["src/geo/geo.controller.ts:17",{"_index":200,"title":{},"body":{"controllers/GeoController.html":{}}}],["src/geo/geo.service.ts",{"_index":101,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{}}}],["src/geo/geo.service.ts:34",{"_index":220,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/geo.service.ts:35",{"_index":216,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/geo.service.ts:47",{"_index":217,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/geo.service.ts:98",{"_index":219,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/location.dto.ts",{"_index":71,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"coverage.html":{}}}],["src/geo/location.dto.ts:12",{"_index":78,"title":{},"body":{"classes/CoordinatesDto.html":{}}}],["src/geo/location.dto.ts:13",{"_index":79,"title":{},"body":{"classes/CoordinatesDto.html":{}}}],["src/geo/location.dto.ts:20",{"_index":225,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/geo/location.dto.ts:26",{"_index":226,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/geo/location.dto.ts:32",{"_index":223,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/main.ts",{"_index":284,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/redis/redis.module.ts",{"_index":230,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/redis/redis.service.ts",{"_index":233,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/redis/redis.service.ts:24",{"_index":237,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:28",{"_index":239,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:6",{"_index":236,"title":{},"body":{"injectables/RedisService.html":{}}}],["start",{"_index":405,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":408,"title":{},"body":{"index.html":{}}}],["start:proddeployment",{"_index":410,"title":{},"body":{"index.html":{}}}],["started",{"_index":314,"title":{"index.html":{}},"body":{}}],["starter",{"_index":317,"title":{},"body":{"index.html":{}}}],["statements",{"_index":277,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":109,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["success",{"_index":169,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["summary",{"_index":210,"title":{},"body":{"controllers/GeoController.html":{}}}],["superior",{"_index":377,"title":{},"body":{"index.html":{}}}],["support",{"_index":449,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":450,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":307,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["table",{"_index":289,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":288,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":436,"title":{},"body":{"index.html":{}}}],["test",{"_index":445,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":447,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.auditurl",{"_index":119,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.baseurl",{"_index":266,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.baseurl}/route",{"_index":270,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.client",{"_index":250,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.on('error",{"_index":254,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.quit",{"_index":257,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.configservice.get('audit_service_url",{"_index":120,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.configservice.get('redis_ttl",{"_index":117,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.configservice.get('routing_service_url",{"_index":267,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.geoservice.processgps(dto",{"_index":213,"title":{},"body":{"controllers/GeoController.html":{}}}],["this.httpservice.axiosref.post",{"_index":269,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.httpservice.axiosref.post(`${this.auditurl}/alert",{"_index":181,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.redisservice",{"_index":148,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.redisservice.getclient().get(key",{"_index":131,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.registeralert",{"_index":132,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.routingclient.calculateroute",{"_index":155,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.ttl",{"_index":116,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["throw",{"_index":272,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["transformer",{"_index":85,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"dependencies.html":{}}}],["true",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["try",{"_index":154,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["ttl",{"_index":112,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["type",{"_index":75,"title":{},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["typescript",{"_index":176,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["ubicación",{"_index":144,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["ui",{"_index":308,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["un",{"_index":331,"title":{},"body":{"index.html":{}}}],["una",{"_index":328,"title":{},"body":{"index.html":{}}}],["undefined})@isobject()@validatenested()@type(undefined",{"_index":222,"title":{},"body":{"classes/LocationDto.html":{}}}],["unitarias",{"_index":444,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":157,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["unlicensed",{"_index":458,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":178,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["usando",{"_index":370,"title":{},"body":{"index.html":{}}}],["v16",{"_index":375,"title":{},"body":{"index.html":{}}}],["validación",{"_index":364,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":83,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["validator",{"_index":84,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"dependencies.html":{},"index.html":{}}}],["variables",{"_index":383,"title":{},"body":{"index.html":{}}}],["veces",{"_index":363,"title":{},"body":{"index.html":{}}}],["vehículo",{"_index":357,"title":{},"body":{"index.html":{}}}],["version",{"_index":455,"title":{},"body":{"properties.html":{}}}],["versión",{"_index":381,"title":{},"body":{"index.html":{}}}],["watch",{"_index":406,"title":{},"body":{"index.html":{}}}],["world",{"_index":68,"title":{},"body":{"injectables/AppService.html":{}}}],["y",{"_index":334,"title":{},"body":{"index.html":{}}}],["ya",{"_index":142,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["zoom",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRoutingServiceClient \n\nRoutingServiceClient \n\nRoutingServiceClient  -->\n\nAppModule->RoutingServiceClient \n\n\n\n\n\nGeoService\n\nGeoService\n\nAppModule -->\n\nGeoService->AppModule\n\n\n\n\n\nRoutingServiceClient\n\nRoutingServiceClient\n\nAppModule -->\n\nRoutingServiceClient->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GeoService\n                        \n                        \n                            RoutingServiceClient\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GeoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoutingServiceClient\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RedisModule } from './redis/redis.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { HttpModule } from '@nestjs/axios';\nimport { GeoService } from './geo/geo.service';\nimport { GeoController } from './geo/geo.controller';\nimport { RoutingServiceClient } from './common/http/routing.service';\n\n@Module({\n  imports: [\n    RedisModule,\n    ConfigModule.forRoot({\n      envFilePath: '.env',\n      isGlobal: true,\n    }),\n    HttpModule,\n  ],\n  controllers: [GeoController],\n  providers: [GeoService, RoutingServiceClient],\n  exports: [RoutingServiceClient],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoordinatesDto.html":{"url":"classes/CoordinatesDto.html","title":"class - CoordinatesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoordinatesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/location.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                lat\n                            \n                            \n                                    \n                                lng\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsObject,\n  ValidateNested,\n  IsNumber,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nclass CoordinatesDto {\n  @IsNumber() lat: number;\n  @IsNumber() lng: number;\n}\n\nexport class LocationDto {\n  @ApiProperty({ example: 'JJW-322' })\n  @IsString()\n  @IsNotEmpty()\n  deviceId: string;\n\n  @ApiProperty({ example: { lat: 4.123, lng: -74.123 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  origin: CoordinatesDto;\n\n  @ApiProperty({ example: { lat: 4.567, lng: -74.567 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  destination: CoordinatesDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Destination.html":{"url":"interfaces/Destination.html","title":"interface - Destination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Destination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lat\n                                        \n                                \n                                \n                                        \n                                            lng\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lng\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lng:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RedisService } from '../redis/redis.service';\nimport { RoutingServiceClient } from '../common/http/routing.service';\n\nexport interface RoutingResonceZ {\n  deviceId: string;\n  origin: Origin;\n  destination: Destination;\n  route: Route[];\n  status: string;\n  cacheTTL: number;\n}\n\ninterface Origin {\n  lat: number;\n  lng: number;\n}\n\ninterface Destination {\n  lat: number;\n  lng: number;\n}\n\ninterface Route {\n  lat: number;\n  lng: number;\n}\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}-${dto.origin.lat}-${dto.origin.lng}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = (await this.routingClient.calculateRoute(\n        dto,\n      )) as unknown as RoutingResonceZ;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${errorMessage}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      console.error('Error al registrar alerta:', errorMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GeoController.html":{"url":"controllers/GeoController.html","title":"controller - GeoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GeoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                geo\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                handleGPSData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        handleGPSData\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGPSData(dto: LocationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Registrar geolocatión GPS'})@ApiResponse({status: 201, description: 'Datos GPS registrados correctamente.'})@ApiResponse({status: 400, description: 'Datos inválidos.'})\n                \n            \n\n                    \n                        \n                            Defined in src/geo/geo.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LocationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { GeoService } from './geo.service';\nimport { LocationDto } from './location.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@Controller('geo')\nexport class GeoController {\n  constructor(private readonly geoService: GeoService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Registrar geolocatión GPS' })\n  @ApiResponse({\n    status: 201,\n    description: 'Datos GPS registrados correctamente.',\n  })\n  @ApiResponse({ status: 400, description: 'Datos inválidos.' })\n  async handleGPSData(@Body() dto: LocationDto) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return await this.geoService.processGps(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GeoService.html":{"url":"injectables/GeoService.html","title":"injectable - GeoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GeoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                auditUrl\n                            \n                            \n                                    Private\n                                ttl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                processGps\n                            \n                            \n                                    Private\n                                    Async\n                                registerAlert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisService: RedisService, routingClient: RoutingServiceClient, httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/geo/geo.service.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        routingClient\n                                                  \n                                                        \n                                                                        RoutingServiceClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processGps\n                        \n                    \n                \n            \n            \n                \n                        \n                    processGps(dto: LocationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/geo/geo.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LocationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        registerAlert\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerAlert(type: string, message: string, source: string, deviceId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/geo/geo.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                deviceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        auditUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/geo/geo.service.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ttl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/geo/geo.service.ts:34\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RedisService } from '../redis/redis.service';\nimport { RoutingServiceClient } from '../common/http/routing.service';\n\nexport interface RoutingResonceZ {\n  deviceId: string;\n  origin: Origin;\n  destination: Destination;\n  route: Route[];\n  status: string;\n  cacheTTL: number;\n}\n\ninterface Origin {\n  lat: number;\n  lng: number;\n}\n\ninterface Destination {\n  lat: number;\n  lng: number;\n}\n\ninterface Route {\n  lat: number;\n  lng: number;\n}\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}-${dto.origin.lat}-${dto.origin.lng}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = (await this.routingClient.calculateRoute(\n        dto,\n      )) as unknown as RoutingResonceZ;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${errorMessage}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      console.error('Error al registrar alerta:', errorMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocationDto.html":{"url":"classes/LocationDto.html","title":"class - LocationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/location.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                destination\n                            \n                            \n                                    \n                                    \n                                    \n                                deviceId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                origin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CoordinatesDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deviceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'JJW-322'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        origin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CoordinatesDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsObject,\n  ValidateNested,\n  IsNumber,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nclass CoordinatesDto {\n  @IsNumber() lat: number;\n  @IsNumber() lng: number;\n}\n\nexport class LocationDto {\n  @ApiProperty({ example: 'JJW-322' })\n  @IsString()\n  @IsNotEmpty()\n  deviceId: string;\n\n  @ApiProperty({ example: { lat: 4.123, lng: -74.123 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  origin: CoordinatesDto;\n\n  @ApiProperty({ example: { lat: 4.567, lng: -74.567 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  destination: CoordinatesDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Origin.html":{"url":"interfaces/Origin.html","title":"interface - Origin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Origin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lat\n                                        \n                                \n                                \n                                        \n                                            lng\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lng\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lng:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RedisService } from '../redis/redis.service';\nimport { RoutingServiceClient } from '../common/http/routing.service';\n\nexport interface RoutingResonceZ {\n  deviceId: string;\n  origin: Origin;\n  destination: Destination;\n  route: Route[];\n  status: string;\n  cacheTTL: number;\n}\n\ninterface Origin {\n  lat: number;\n  lng: number;\n}\n\ninterface Destination {\n  lat: number;\n  lng: number;\n}\n\ninterface Route {\n  lat: number;\n  lng: number;\n}\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}-${dto.origin.lat}-${dto.origin.lng}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = (await this.routingClient.calculateRoute(\n        dto,\n      )) as unknown as RoutingResonceZ;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${errorMessage}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      console.error('Error al registrar alerta:', errorMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { RedisService } from './redis.service';\n\n@Global()\n@Module({\n  providers: [RedisService],\n  exports: [RedisService],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getClient\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/redis/redis.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Redis\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/redis/redis.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy } from '@nestjs/common';\nimport Redis from 'ioredis';\n\n@Injectable()\nexport class RedisService implements OnModuleDestroy {\n  private client: Redis;\n\n  constructor() {\n    const host = process.env.REDIS_HOST || 'localhost';\n    const port = parseInt(process.env.REDIS_PORT || '6379', 10);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n    this.client = new Redis({\n      host,\n      port,\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    this.client.on('error', (err: Error) => {\n      console.error('Redis error:', err);\n    });\n  }\n\n  getClient(): Redis {\n    return this.client;\n  }\n\n  async onModuleDestroy() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    await this.client.quit();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Route.html":{"url":"interfaces/Route.html","title":"interface - Route","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Route\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lat\n                                        \n                                \n                                \n                                        \n                                            lng\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lng\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lng:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RedisService } from '../redis/redis.service';\nimport { RoutingServiceClient } from '../common/http/routing.service';\n\nexport interface RoutingResonceZ {\n  deviceId: string;\n  origin: Origin;\n  destination: Destination;\n  route: Route[];\n  status: string;\n  cacheTTL: number;\n}\n\ninterface Origin {\n  lat: number;\n  lng: number;\n}\n\ninterface Destination {\n  lat: number;\n  lng: number;\n}\n\ninterface Route {\n  lat: number;\n  lng: number;\n}\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}-${dto.origin.lat}-${dto.origin.lng}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = (await this.routingClient.calculateRoute(\n        dto,\n      )) as unknown as RoutingResonceZ;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${errorMessage}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      console.error('Error al registrar alerta:', errorMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RoutingResonceZ.html":{"url":"interfaces/RoutingResonceZ.html","title":"interface - RoutingResonceZ","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RoutingResonceZ\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cacheTTL\n                                        \n                                \n                                \n                                        \n                                            destination\n                                        \n                                \n                                \n                                        \n                                            deviceId\n                                        \n                                \n                                \n                                        \n                                            origin\n                                        \n                                \n                                \n                                        \n                                            route\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheTTL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheTTL:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         Destination\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Destination\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deviceId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        origin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        origin:         Origin\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Origin\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:         Route[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Route[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RedisService } from '../redis/redis.service';\nimport { RoutingServiceClient } from '../common/http/routing.service';\n\nexport interface RoutingResonceZ {\n  deviceId: string;\n  origin: Origin;\n  destination: Destination;\n  route: Route[];\n  status: string;\n  cacheTTL: number;\n}\n\ninterface Origin {\n  lat: number;\n  lng: number;\n}\n\ninterface Destination {\n  lat: number;\n  lng: number;\n}\n\ninterface Route {\n  lat: number;\n  lng: number;\n}\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}-${dto.origin.lat}-${dto.origin.lng}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = (await this.routingClient.calculateRoute(\n        dto,\n      )) as unknown as RoutingResonceZ;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${errorMessage}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      console.error('Error al registrar alerta:', errorMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutingServiceClient.html":{"url":"injectables/RoutingServiceClient.html","title":"injectable - RoutingServiceClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutingServiceClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/http/routing.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                calculateRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/http/routing.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        calculateRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateRoute(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/http/routing.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/http/routing.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RoutingServiceClient {\n  private readonly baseUrl: string;\n\n  constructor(\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.baseUrl = this.configService.get('ROUTING_SERVICE_URL') ?? '';\n  }\n\n  async calculateRoute(payload: {\n    deviceId: string;\n    origin: { lat: number; lng: number };\n    destination: { lat: number; lng: number };\n  }) {\n    try {\n      const response = await this.httpService.axiosRef.post(\n        `${this.baseUrl}/route`,\n        payload,\n      );\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return response.data;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      throw new Error(`Routing service error: ${errorMessage}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/http/routing.service.ts\n            \n            injectable\n            RoutingServiceClient\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/geo/geo.controller.ts\n            \n            controller\n            GeoController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            injectable\n            GeoService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            interface\n            Destination\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            interface\n            Origin\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            interface\n            Route\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            interface\n            RoutingResonceZ\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/geo/location.dto.ts\n            \n            class\n            CoordinatesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/geo/location.dto.ts\n            \n            class\n            LocationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.1.4\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ioredis : ^5.6.1\n        \n            redis : ^4.7.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescription\nNest framework TypeScript starter repository.\nMicroservicio de auditoría\nEl microservicio de Geolocalización :\nEste servicio forma parte de una arquitectura de microservicios para un sistema de monitoreo y control de flotas, y actúa servicio de geolocalización.\nEstá construido con NestJS.\nCaracterísticas\n\nRecibe datos GPS (HTTP POST) y los almacena en Redis (TTL: 5 minutos). \nImplementar un mecanismo de duplicación para evitar registros duplicados si un vehículo envía la misma coordenada múltiples veces. \nValidación de datos mediante DTOs y class-validator.\nSwagger API Documentation.\nPersistencia en PostgreSQL usando Prisma ORM.\n\nRequisitos\n\nNode.js (v16 o superior)\nnpm\nDocker y Docker Compose (para la versión containerizada)\n\nVariables de entorno\nCrear un archivo .env en la raíz del proyecto con las siguientes variables:\nExample :REDIS_HOST=redis\nREDIS_PORT=6379\nPORT=3001\nROUTING_SERVICE_URL=http://routing-service:3002\nAUDIT_SERVICE_URL=http://audit-service:3003\nDownload the repository\nExample :$Project setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodDeployment\nEndpoints\nAudit Alerts\nExample :POST /geoParámetros de consulta:\nExample :{\n    \"deviceId\": \"AZD-223\",\n    \"origin\": {\n        \"lat\": 5.5225,\n        \"lng\": 8.2225\n    },\n    \"destination\": {\n        \"lat\": 4.1225,\n        \"lng\": 10.1225\n    }\n}Respuesta:\nExample :{\n    \"status\": \"success\",\n    \"data\": {\n        \"saved\": true,\n        \"route\": {\n            \"deviceId\": \"GaD-223\",\n            \"origin\": {\n                \"lat\": 55.5225,\n                \"lng\": 85.2225\n            },\n            \"destination\": {\n                \"lat\": 22.1225,\n                \"lng\": 49.1225\n            },\n            \"route\": [\n                {\n                    \"lat\": 38.8225,\n                    \"lng\": 67.1725\n                }\n            ],\n            \"status\": \"success\",\n            \"cacheTTL\": 300\n        }\n    }\n}Documentación API\nLa documentación de la API está disponible en Swagger UI:\nhttp://localhost:3001/api/docs\nLa documentación de la API está disponible en CompoDoc UI:\nhttp://localhost:3001/docs/\nIncluye:\nTags por módulo (Alert)\nEjemplos de payloads\nPruebas\nExample :# Ejecutar pruebas unitarias\nnpm run test\n\n# Ejecutar pruebas con cobertura\nnpm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRoutingServiceClient \n\nRoutingServiceClient \n\nRoutingServiceClient  -->\n\nAppModule->RoutingServiceClient \n\n\n\n\n\nGeoService\n\nGeoService\n\nAppModule -->\n\nGeoService->AppModule\n\n\n\n\n\nRoutingServiceClient\n\nRoutingServiceClient\n\nAppModule -->\n\nRoutingServiceClient->AppModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
