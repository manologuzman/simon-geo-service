var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.239,1,1.711]],["body/controllers/AppController.html",[0,1.905,1,2.631,2,1.754,3,0.682,4,0.682,5,0.567,6,2.498,7,0.682,8,1.637,9,3.666,10,1.754,11,0.059,12,0.95,13,3.145,14,1.289,15,1.407,16,0.866,17,0.809,18,2.447,19,3.145,20,0.682,21,0.189,22,2.498,23,1.754,24,1.289,25,3.145,26,0.045,27,0.045]],["title/modules/AppModule.html",[28,1.239,29,1.449]],["body/modules/AppModule.html",[2,1.837,3,0.511,4,0.511,5,0.425,11,0.059,16,0.998,17,0.606,20,0.511,21,0.142,26,0.037,27,0.037,28,1.811,29,2.723,30,1.124,31,1.124,32,1.553,33,1.553,34,1.124,35,2.502,36,2.502,37,1.872,38,1.872,39,1.872,40,1.872,41,2.138,42,2.019,43,1.837,44,2.17,45,1.553,46,1.553,47,2.356,48,2.118,49,3.293,50,2.356,51,2.356,52,1.315,53,3.293,54,1.315,55,2.356,56,2.356,57,2.356,58,2.356,59,2.356,60,1.872,61,2.356,62,1.872]],["title/injectables/AppService.html",[18,1.449,63,0.668]],["body/injectables/AppService.html",[3,0.721,4,0.721,5,0.599,7,0.721,8,1.694,9,3.739,11,0.058,12,1.003,14,1.362,15,1.456,16,0.721,17,0.854,18,2.306,20,0.721,21,0.2,24,1.362,26,0.047,27,0.047,63,1.063,64,1.585,65,2.639,66,3.322,67,3.322,68,3.322]],["title/classes/CoordinatesDto.html",[21,0.156,69,1.449]],["body/classes/CoordinatesDto.html",[3,0.528,4,0.528,5,0.439,7,0.528,10,1.88,11,0.059,12,1.018,15,0.858,16,0.838,20,0.528,21,0.251,26,0.038,27,0.038,69,2.526,70,1.605,71,1.605,72,1.187,73,1.794,74,1.794,75,1.542,76,1.99,77,3.478,78,2.436,79,2.436,80,2.677,81,2.677,82,3.07,83,3.07,84,1.359,85,1.605,86,3.313,87,1.359,88,0.999,89,2.547,90,1.935,91,1.935,92,0.999,93,1.935,94,1.935,95,1.359,96,1.935,97,1.935,98,1.162]],["title/controllers/GeoController.html",[0,1.239,48,1.449]],["body/controllers/GeoController.html",[0,1.141,2,1.334,3,0.519,4,0.519,5,0.431,7,0.519,8,1.364,10,1.334,11,0.058,12,0.722,14,0.98,16,0.897,17,0.615,20,0.519,21,0.144,22,1.9,23,1.334,24,0.98,26,0.038,27,0.038,43,1.568,48,1.856,75,0.842,87,1.334,88,1.696,99,1.9,100,2.391,101,1.9,102,2.135,103,3.327,104,2.391,105,2.391,106,2.643,107,3.327,108,2.391,109,3.327,110,2.726,111,3.286,112,3.04,113,3.327,114,2.391,115,3.327,116,3.327,117,2.391,118,1.334,119,1.334,120,1.334,121,2.643,122,1.9,123,2.643,124,2.391,125,2.391,126,1.9,127,3.327,128,3.826,129,2.391,130,2.391,131,2.643,132,2.391,133,2.391,134,1.334,135,2.391]],["title/injectables/GeoService.html",[43,1.064,63,0.668]],["body/injectables/GeoService.html",[3,0.295,4,0.74,5,0.246,7,0.295,8,0.894,11,0.059,12,1.03,14,0.894,15,1.585,16,0.789,17,0.35,20,0.295,21,0.082,23,1.739,24,1.118,26,0.025,27,0.025,42,1.278,43,0.894,52,0.76,54,0.76,62,1.082,63,0.561,64,0.65,72,0.768,73,0.558,74,0.558,75,1.399,76,1.04,88,1.278,92,1.398,98,0.65,101,2.166,102,2.03,106,1.082,118,1.521,119,1.521,120,1.521,121,1.082,126,1.082,131,2.166,134,2.03,136,1.082,137,2.925,138,2.727,139,1.797,140,2.18,141,2.727,142,1.437,143,1.362,144,1.492,145,2.727,146,3.036,147,3.036,148,2.18,149,2.18,150,1.362,151,2.18,152,1.362,153,3.639,154,1.362,155,1.362,156,1.362,157,1.362,158,2.18,159,1.362,160,1.362,161,1.362,162,1.362,163,1.797,164,1.082,165,1.362,166,2.18,167,1.362,168,2.18,169,2.18,170,1.362,171,1.362,172,1.362,173,1.082,174,3.117,175,1.732,176,1.362,177,1.362,178,1.362,179,1.362,180,1.082,181,1.362,182,1.362,183,1.362,184,1.362,185,1.082,186,1.362,187,1.362,188,1.362,189,2.727,190,1.732,191,1.362,192,1.732,193,1.437,194,1.362,195,2.054,196,2.727,197,2.18,198,2.18,199,1.732,200,1.362,201,1.362,202,1.362,203,1.362,204,1.362,205,1.362,206,1.362]],["title/classes/LocationDto.html",[21,0.156,88,1.064]],["body/classes/LocationDto.html",[3,0.502,4,0.502,5,0.417,7,0.502,10,2.097,11,0.059,12,1.135,15,1.146,16,0.816,20,0.502,21,0.245,26,0.037,27,0.037,69,2.553,70,1.525,71,1.525,72,1.146,73,1.541,74,1.541,75,1.57,76,1.552,77,2.987,80,2.583,81,2.583,82,2.987,83,2.987,84,1.291,85,1.525,86,3.24,87,1.291,88,1.333,89,2.478,90,2.583,91,1.839,92,1.541,93,1.839,94,1.839,95,2.097,96,1.839,97,1.839,98,1.794,207,3.76,208,3.252,209,2.314,210,2.314,211,2.314,212,2.314]],["title/modules/RedisModule.html",[28,1.239,41,1.239]],["body/modules/RedisModule.html",[3,0.639,4,0.639,5,0.531,11,0.057,16,0.83,17,0.757,20,0.639,21,0.177,26,0.043,27,0.043,28,2.029,30,1.405,31,1.405,32,1.941,33,1.941,34,1.405,35,2.803,36,2.803,41,2.324,44,2.523,45,1.941,46,1.941,144,2.092,213,2.34,214,2.34,215,2.34,216,2.945,217,3.828,218,2.945]],["title/injectables/RedisService.html",[63,0.668,144,1.064]],["body/injectables/RedisService.html",[3,0.394,4,0.394,5,0.327,7,0.394,8,1.117,11,0.058,12,1.177,14,1.341,15,1.282,16,0.591,17,0.467,20,0.394,21,0.109,24,0.744,26,0.031,27,0.031,63,0.701,64,0.866,72,0.96,73,0.744,74,0.744,75,1.282,76,1.954,92,0.744,102,1.826,118,1.013,119,1.013,120,1.013,134,1.013,137,2.157,139,2.157,142,2.157,144,1.117,163,1.796,164,1.442,185,2.89,193,1.796,195,1.796,219,1.442,220,3.273,221,4.094,222,2.726,223,2.726,224,1.815,225,2.698,226,1.815,227,2.726,228,3.273,229,2.165,230,1.815,231,1.815,232,1.442,233,1.815,234,1.815,235,1.442,236,1.796,237,1.815,238,1.815,239,2.726,240,1.815,241,1.815,242,2.726,243,1.815,244,1.815,245,1.815,246,2.6,247,2.6,248,2.6,249,2.6,250,2.799,251,3.374,252,3.374,253,2.726,254,3.273,255,2.726,256,2.165,257,2.165,258,1.815,259,1.815,260,1.815]],["title/injectables/RoutingServiceClient.html",[42,1.064,63,0.668]],["body/injectables/RoutingServiceClient.html",[3,0.434,4,0.434,5,0.361,7,0.434,8,1.201,11,0.059,12,1.046,14,0.82,15,1.221,16,0.752,17,0.514,20,0.434,21,0.12,23,2.265,24,1.201,26,0.033,27,0.033,42,1.201,52,1.116,54,1.116,63,0.753,64,0.954,72,1.032,73,1.201,74,1.201,75,1.43,76,1.82,92,0.82,95,1.116,98,0.954,102,1.933,118,1.634,119,1.634,120,1.634,122,1.589,134,1.116,137,2.675,142,1.93,146,3.37,147,3.481,163,1.318,175,1.589,180,2.327,190,1.589,192,1.589,193,1.318,195,1.318,199,1.589,229,2.327,235,1.589,236,1.318,246,2.327,247,2.327,248,2.327,249,2.327,250,1.93,251,2.327,252,2.327,256,1.589,257,1.589,261,1.589,262,3.465,263,2.929,264,2,265,2.929,266,2.929,267,2,268,2,269,2,270,2,271,2,272,2,273,2,274,2]],["title/coverage.html",[275,2.797]],["body/coverage.html",[0,1.81,1,1.915,5,0.524,6,2.308,11,0.057,18,1.621,21,0.228,26,0.043,27,0.043,34,1.386,42,1.191,43,1.191,48,1.621,63,1.152,65,2.308,69,1.621,71,2.5,75,1.024,88,1.191,99,2.308,136,2.308,144,1.191,219,2.308,236,1.915,261,2.308,275,2.308,276,2.308,277,2.905,278,2.905,279,4.979,280,4.225,281,3.794,282,3.794,283,2.905,284,2.308,285,2.905,286,2.905,287,2.905,288,2.905]],["title/dependencies.html",[31,1.487,289,1.732]],["body/dependencies.html",[11,0.059,17,0.809,21,0.24,26,0.045,27,0.045,31,1.5,52,1.754,54,1.754,84,1.754,85,2.073,87,1.754,225,2.073,232,2.498,290,3.145,291,4.387,292,3.145,293,3.145,294,3.145,295,3.993,296,3.145,297,3.145,298,3.145,299,3.145,300,3.145,301,3.145,302,3.145,303,3.145,304,3.145,305,3.145,306,2.498,307,2.498,308,3.145]],["title/miscellaneous/functions.html",[309,1.732,310,2.476]],["body/miscellaneous/functions.html",[7,0.836,11,0.051,26,0.051,27,0.051,34,2.289,284,3.063,309,3.063,310,3.063,311,3.855]],["title/index.html",[7,0.473,312,2.18,313,2.18]],["body/index.html",[11,0.054,21,0.098,26,0.028,27,0.028,60,1.291,73,1.027,74,1.027,84,0.906,89,2.781,92,0.666,95,0.906,98,0.775,110,1.071,111,1.99,112,1.291,123,1.99,139,1.071,173,2.428,225,1.071,250,1.071,276,1.291,306,1.99,307,1.99,314,1.624,315,1.624,316,1.624,317,2.505,318,2.505,319,4.677,320,1.624,321,1.624,322,2.505,323,1.624,324,2.505,325,1.624,326,1.624,327,1.624,328,1.624,329,1.624,330,3.435,331,1.624,332,1.624,333,3.711,334,1.624,335,1.624,336,1.624,337,3.057,338,1.624,339,3.057,340,1.624,341,1.624,342,1.624,343,1.624,344,1.624,345,1.624,346,3.711,347,1.624,348,1.624,349,1.624,350,1.624,351,1.624,352,1.624,353,1.624,354,1.624,355,1.624,356,1.624,357,1.624,358,4.086,359,1.624,360,1.624,361,1.624,362,1.624,363,1.624,364,1.624,365,1.624,366,3.435,367,1.624,368,1.624,369,1.624,370,1.624,371,1.624,372,1.624,373,1.624,374,1.624,375,1.624,376,1.624,377,4.086,378,2.505,379,1.624,380,1.624,381,1.624,382,2.505,383,1.624,384,1.624,385,1.624,386,1.624,387,1.624,388,1.624,389,1.624,390,1.624,391,1.624,392,1.624,393,1.624,394,1.624,395,1.624,396,1.624,397,1.624,398,1.624,399,1.624,400,2.505,401,1.624,402,1.624,403,3.921,404,1.624,405,1.624,406,1.624,407,2.505,408,1.624,409,1.624,410,1.624,411,1.624,412,1.624,413,1.624,414,1.624,415,1.624,416,1.624,417,1.624,418,1.624,419,1.624,420,1.624,421,1.624,422,1.624,423,3.057,424,2.505,425,1.624,426,1.624,427,1.624,428,1.624,429,1.624,430,1.624,431,1.624,432,1.624,433,1.624,434,1.624,435,3.057,436,2.505,437,1.624,438,1.624,439,1.624,440,1.624]],["title/modules.html",[30,1.68]],["body/modules.html",[11,0.051,26,0.051,27,0.051,29,2.113,30,1.807,41,1.807,441,4.475,442,4.475,443,4.475,444,4.475]],["title/overview.html",[445,2.797]],["body/overview.html",[2,1.606,11,0.056,26,0.043,27,0.043,28,1.374,29,2.773,30,1.374,31,1.374,32,1.898,33,1.898,34,1.374,35,1.898,36,1.898,37,2.288,38,2.288,39,2.288,40,2.288,41,2.269,42,1.986,43,1.724,44,2.486,45,1.898,46,1.898,64,1.374,70,1.898,144,1.986,213,2.288,214,2.288,215,2.288,445,2.288,446,4.207,447,2.88]],["title/properties.html",[72,1.098,289,1.732]],["body/properties.html",[11,0.058,26,0.051,27,0.051,72,1.334,110,2.496,448,3.788,449,3.788,450,3.788,451,3.788,452,3.788]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":279,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":449,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":298,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":303,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":297,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":286,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":280,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":283,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":281,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":282,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":245,"title":{},"body":{"injectables/RedisService.html":{}}}],["10.1225",{"_index":421,"title":{},"body":{"index.html":{}}}],["11.0.1",{"_index":291,"title":{},"body":{"dependencies.html":{}}}],["11.1.4",{"_index":296,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":446,"title":{},"body":{"overview.html":{}}}],["201",{"_index":109,"title":{},"body":{"controllers/GeoController.html":{}}}],["223",{"_index":417,"title":{},"body":{"index.html":{}}}],["300",{"_index":160,"title":{},"body":{"injectables/GeoService.html":{}}}],["322",{"_index":91,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["322'})@isstring()@isnotempty",{"_index":210,"title":{},"body":{"classes/LocationDto.html":{}}}],["4",{"_index":447,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":290,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":292,"title":{},"body":{"dependencies.html":{}}}],["4.1225",{"_index":420,"title":{},"body":{"index.html":{}}}],["4.123",{"_index":93,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["4.567",{"_index":96,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["4.7.0",{"_index":300,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":115,"title":{},"body":{"controllers/GeoController.html":{}}}],["5",{"_index":347,"title":{},"body":{"index.html":{}}}],["5.0.1",{"_index":308,"title":{},"body":{"dependencies.html":{}}}],["5.5225",{"_index":418,"title":{},"body":{"index.html":{}}}],["5.6.1",{"_index":299,"title":{},"body":{"dependencies.html":{}}}],["6379",{"_index":244,"title":{},"body":{"injectables/RedisService.html":{}}}],["7.8.1",{"_index":305,"title":{},"body":{"dependencies.html":{}}}],["74.123",{"_index":94,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["74.567",{"_index":97,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["8.2225",{"_index":419,"title":{},"body":{"index.html":{}}}],["access",{"_index":257,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["actúa",{"_index":336,"title":{},"body":{"index.html":{}}}],["al",{"_index":196,"title":{},"body":{"injectables/GeoService.html":{}}}],["alert",{"_index":432,"title":{},"body":{"index.html":{}}}],["alerta",{"_index":206,"title":{},"body":{"injectables/GeoService.html":{}}}],["alerts",{"_index":413,"title":{},"body":{"index.html":{}}}],["almacena",{"_index":345,"title":{},"body":{"index.html":{}}}],["api",{"_index":366,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":127,"title":{},"body":{"controllers/GeoController.html":{}}}],["apiproperty",{"_index":86,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["apiproperty({example",{"_index":207,"title":{},"body":{"classes/LocationDto.html":{}}}],["apiresponse",{"_index":128,"title":{},"body":{"controllers/GeoController.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["archivo",{"_index":385,"title":{},"body":{"index.html":{}}}],["arg1",{"_index":228,"title":{},"body":{"injectables/RedisService.html":{}}}],["arquitectura",{"_index":328,"title":{},"body":{"index.html":{}}}],["assignment",{"_index":253,"title":{},"body":{"injectables/RedisService.html":{}}}],["async",{"_index":102,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["audit",{"_index":412,"title":{},"body":{"index.html":{}}}],["audit_service_url=http://audit",{"_index":397,"title":{},"body":{"index.html":{}}}],["auditoría",{"_index":320,"title":{},"body":{"index.html":{}}}],["auditurl",{"_index":138,"title":{},"body":{"injectables/GeoService.html":{}}}],["author",{"_index":452,"title":{},"body":{"properties.html":{}}}],["await",{"_index":134,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["azd",{"_index":416,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":262,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["body",{"_index":124,"title":{},"body":{"controllers/GeoController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":444,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":441,"title":{},"body":{"modules.html":{}}}],["calcular",{"_index":197,"title":{},"body":{"injectables/GeoService.html":{}}}],["calculateroute",{"_index":263,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["calculateroute(payload",{"_index":266,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["call",{"_index":254,"title":{},"body":{"injectables/RedisService.html":{}}}],["características",{"_index":341,"title":{},"body":{"index.html":{}}}],["catch",{"_index":192,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["class",{"_index":21,"title":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":70,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"overview.html":{}}}],["client",{"_index":220,"title":{},"body":{"injectables/RedisService.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_exports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_redismodule",{"_index":213,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":214,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":215,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cobertura",{"_index":439,"title":{},"body":{"index.html":{}}}],["common/http/routing.service",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["compodoc",{"_index":426,"title":{},"body":{"index.html":{}}}],["compose",{"_index":379,"title":{},"body":{"index.html":{}}}],["con",{"_index":339,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":147,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["console.error('error",{"_index":205,"title":{},"body":{"injectables/GeoService.html":{}}}],["console.error('redis",{"_index":259,"title":{},"body":{"injectables/RedisService.html":{}}}],["const",{"_index":163,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["constructor",{"_index":142,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["constructor(httpservice",{"_index":264,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/GeoController.html":{}}}],["constructor(redisservice",{"_index":143,"title":{},"body":{"injectables/GeoService.html":{}}}],["construido",{"_index":338,"title":{},"body":{"index.html":{}}}],["consulta",{"_index":415,"title":{},"body":{"index.html":{}}}],["containerizada",{"_index":381,"title":{},"body":{"index.html":{}}}],["control",{"_index":334,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/GeoController.html":{}},"body":{"controllers/AppController.html":{},"controllers/GeoController.html":{},"coverage.html":{}}}],["controller('geo",{"_index":129,"title":{},"body":{"controllers/GeoController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/GeoController.html":{},"overview.html":{}}}],["coordenada",{"_index":360,"title":{},"body":{"index.html":{}}}],["coordinatesdto",{"_index":69,"title":{"classes/CoordinatesDto.html":{}},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"coverage.html":{}}}],["correctamente",{"_index":132,"title":{},"body":{"controllers/GeoController.html":{}}}],["correctamente.'})@apiresponse({status",{"_index":114,"title":{},"body":{"controllers/GeoController.html":{}}}],["coverage",{"_index":275,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crear",{"_index":384,"title":{},"body":{"index.html":{}}}],["data",{"_index":201,"title":{},"body":{"injectables/GeoService.html":{}}}],["datos",{"_index":111,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{}}}],["de",{"_index":319,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"classes/LocationDto.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["del",{"_index":387,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":110,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":98,"title":{},"body":{"classes/CoordinatesDto.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["detectado",{"_index":172,"title":{},"body":{"injectables/GeoService.html":{}}}],["detected",{"_index":170,"title":{},"body":{"injectables/GeoService.html":{}}}],["development",{"_index":404,"title":{},"body":{"index.html":{}}}],["deviceid",{"_index":92,"title":{},"body":{"classes/CoordinatesDto.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["disable",{"_index":247,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["disponible",{"_index":424,"title":{},"body":{"index.html":{}}}],["docker",{"_index":378,"title":{},"body":{"index.html":{}}}],["documentación",{"_index":423,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":276,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["download",{"_index":399,"title":{},"body":{"index.html":{}}}],["dto",{"_index":121,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{}}}],["dto.destination",{"_index":183,"title":{},"body":{"injectables/GeoService.html":{}}}],["dto.deviceid",{"_index":174,"title":{},"body":{"injectables/GeoService.html":{}}}],["dto.origin.lat",{"_index":181,"title":{},"body":{"injectables/GeoService.html":{}}}],["dto.origin.lng",{"_index":182,"title":{},"body":{"injectables/GeoService.html":{}}}],["dtos",{"_index":365,"title":{},"body":{"index.html":{}}}],["duplicación",{"_index":351,"title":{},"body":{"index.html":{}}}],["duplicado",{"_index":171,"title":{},"body":{"injectables/GeoService.html":{}}}],["duplicados",{"_index":354,"title":{},"body":{"index.html":{}}}],["duplicate",{"_index":169,"title":{},"body":{"injectables/GeoService.html":{}}}],["ejecutar",{"_index":436,"title":{},"body":{"index.html":{}}}],["ejemplos",{"_index":433,"title":{},"body":{"index.html":{}}}],["el",{"_index":321,"title":{},"body":{"index.html":{}}}],["en",{"_index":346,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":411,"title":{},"body":{"index.html":{}}}],["entorno",{"_index":383,"title":{},"body":{"index.html":{}}}],["env",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["envfilepath",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["envía",{"_index":357,"title":{},"body":{"index.html":{}}}],["err",{"_index":193,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["err.message",{"_index":199,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["error",{"_index":195,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["error('method",{"_index":237,"title":{},"body":{"injectables/RedisService.html":{}}}],["error(`routing",{"_index":274,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["eslint",{"_index":246,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["eslint/no",{"_index":251,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["est",{"_index":337,"title":{},"body":{"index.html":{}}}],["este",{"_index":323,"title":{},"body":{"index.html":{}}}],["evitar",{"_index":352,"title":{},"body":{"index.html":{}}}],["ex",{"_index":188,"title":{},"body":{"injectables/GeoService.html":{}}}],["example",{"_index":89,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"index.html":{}}}],["existe",{"_index":177,"title":{},"body":{"injectables/GeoService.html":{}}}],["exists",{"_index":166,"title":{},"body":{"injectables/GeoService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["express",{"_index":295,"title":{},"body":{"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["flotas",{"_index":335,"title":{},"body":{"index.html":{}}}],["forma",{"_index":325,"title":{},"body":{"index.html":{}}}],["framework",{"_index":315,"title":{},"body":{"index.html":{}}}],["function",{"_index":285,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":310,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":101,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{}}}],["geo.service",{"_index":125,"title":{},"body":{"controllers/GeoController.html":{}}}],["geo/geo.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["geo/geo.service",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["geocontroller",{"_index":48,"title":{"controllers/GeoController.html":{}},"body":{"modules/AppModule.html":{},"controllers/GeoController.html":{},"coverage.html":{}}}],["geolocalización",{"_index":322,"title":{},"body":{"index.html":{}}}],["geolocatión",{"_index":107,"title":{},"body":{"controllers/GeoController.html":{}}}],["geoparámetros",{"_index":414,"title":{},"body":{"index.html":{}}}],["geoservice",{"_index":43,"title":{"injectables/GeoService.html":{}},"body":{"modules/AppModule.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"coverage.html":{},"overview.html":{}}}],["getclient",{"_index":185,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RedisService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":312,"title":{"index.html":{}},"body":{}}],["global",{"_index":217,"title":{},"body":{"modules/RedisModule.html":{}}}],["gps",{"_index":112,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{}}}],["gps'})@apiresponse({status",{"_index":108,"title":{},"body":{"controllers/GeoController.html":{}}}],["gps:${dto.deviceid",{"_index":165,"title":{},"body":{"injectables/GeoService.html":{}}}],["handlegpsdata",{"_index":103,"title":{},"body":{"controllers/GeoController.html":{}}}],["handlegpsdata(@body",{"_index":133,"title":{},"body":{"controllers/GeoController.html":{}}}],["handlegpsdata(dto",{"_index":104,"title":{},"body":{"controllers/GeoController.html":{}}}],["hello",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":239,"title":{},"body":{"injectables/RedisService.html":{}}}],["http",{"_index":343,"title":{},"body":{"index.html":{}}}],["http://localhost:3001/api/docs",{"_index":425,"title":{},"body":{"index.html":{}}}],["http://localhost:3001/docs",{"_index":427,"title":{},"body":{"index.html":{}}}],["httpmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["httpservice",{"_index":146,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["identifier",{"_index":277,"title":{},"body":{"coverage.html":{}}}],["implementar",{"_index":349,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":238,"title":{},"body":{"injectables/RedisService.html":{}}}],["implements",{"_index":233,"title":{},"body":{"injectables/RedisService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["imports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["incluye",{"_index":428,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["injectable",{"_index":63,"title":{"injectables/AppService.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}},"body":{"injectables/AppService.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["injectables",{"_index":64,"title":{},"body":{"injectables/AppService.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"overview.html":{}}}],["installcompile",{"_index":402,"title":{},"body":{"index.html":{}}}],["inválidos",{"_index":116,"title":{},"body":{"controllers/GeoController.html":{}}}],["ioredis",{"_index":232,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{}}}],["isglobal",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":80,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["isnumber",{"_index":77,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["isobject",{"_index":82,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["isstring",{"_index":81,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["jjw",{"_index":90,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["json.stringify(payload",{"_index":187,"title":{},"body":{"injectables/GeoService.html":{}}}],["key",{"_index":164,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RedisService.html":{}}}],["la",{"_index":358,"title":{},"body":{"index.html":{}}}],["las",{"_index":389,"title":{},"body":{"index.html":{}}}],["lat",{"_index":73,"title":{},"body":{"classes/CoordinatesDto.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["license",{"_index":450,"title":{},"body":{"properties.html":{}}}],["line",{"_index":249,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["literal",{"_index":229,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["lng",{"_index":74,"title":{},"body":{"classes/CoordinatesDto.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["localhost",{"_index":241,"title":{},"body":{"injectables/RedisService.html":{}}}],["location.dto",{"_index":126,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{}}}],["locationdto",{"_index":88,"title":{"classes/LocationDto.html":{}},"body":{"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"coverage.html":{}}}],["los",{"_index":344,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mecanismo",{"_index":350,"title":{},"body":{"index.html":{}}}],["mediante",{"_index":364,"title":{},"body":{"index.html":{}}}],["member",{"_index":256,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["message",{"_index":153,"title":{},"body":{"injectables/GeoService.html":{}}}],["metadata",{"_index":302,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["microservicio",{"_index":318,"title":{},"body":{"index.html":{}}}],["microservicios",{"_index":329,"title":{},"body":{"index.html":{}}}],["minutos",{"_index":348,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":309,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["misma",{"_index":359,"title":{},"body":{"index.html":{}}}],["mode",{"_index":407,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["monitoreo",{"_index":332,"title":{},"body":{"index.html":{}}}],["módulo",{"_index":431,"title":{},"body":{"index.html":{}}}],["múltiples",{"_index":361,"title":{},"body":{"index.html":{}}}],["name",{"_index":119,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["nest",{"_index":314,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":340,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":293,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":294,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":87,"title":{},"body":{"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"classes/LocationDto.html":{},"dependencies.html":{}}}],["new",{"_index":236,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["next",{"_index":248,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["node.js",{"_index":373,"title":{},"body":{"index.html":{}}}],["npm",{"_index":377,"title":{},"body":{"index.html":{}}}],["number",{"_index":76,"title":{},"body":{"classes/CoordinatesDto.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["o",{"_index":375,"title":{},"body":{"index.html":{}}}],["onmoduledestroy",{"_index":221,"title":{},"body":{"injectables/RedisService.html":{}}}],["optional",{"_index":120,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["origin",{"_index":95,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["orm",{"_index":371,"title":{},"body":{"index.html":{}}}],["out",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["overview",{"_index":445,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":289,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":173,"title":{},"body":{"injectables/GeoService.html":{},"index.html":{}}}],["parameters",{"_index":118,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["parseint(process.env.redis_port",{"_index":243,"title":{},"body":{"injectables/RedisService.html":{}}}],["parte",{"_index":326,"title":{},"body":{"index.html":{}}}],["payload",{"_index":180,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["payloads",{"_index":434,"title":{},"body":{"index.html":{}}}],["persistencia",{"_index":367,"title":{},"body":{"index.html":{}}}],["por",{"_index":430,"title":{},"body":{"index.html":{}}}],["port",{"_index":242,"title":{},"body":{"injectables/RedisService.html":{}}}],["port=3001",{"_index":394,"title":{},"body":{"index.html":{}}}],["post",{"_index":123,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{}}}],["post()@apioperation({summary",{"_index":105,"title":{},"body":{"controllers/GeoController.html":{}}}],["postgresql",{"_index":368,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":100,"title":{},"body":{"controllers/GeoController.html":{}}}],["prisma",{"_index":370,"title":{},"body":{"index.html":{}}}],["private",{"_index":137,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["process.env.redis_host",{"_index":240,"title":{},"body":{"injectables/RedisService.html":{}}}],["processgps",{"_index":140,"title":{},"body":{"injectables/GeoService.html":{}}}],["processgps(dto",{"_index":149,"title":{},"body":{"injectables/GeoService.html":{}}}],["production",{"_index":409,"title":{},"body":{"index.html":{}}}],["project",{"_index":400,"title":{},"body":{"index.html":{}}}],["promise",{"_index":151,"title":{},"body":{"injectables/GeoService.html":{}}}],["properties",{"_index":72,"title":{"properties.html":{}},"body":{"classes/CoordinatesDto.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["proyecto",{"_index":388,"title":{},"body":{"index.html":{}}}],["pruebas",{"_index":435,"title":{},"body":{"index.html":{}}}],["raíz",{"_index":386,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["recibe",{"_index":342,"title":{},"body":{"index.html":{}}}],["reciente",{"_index":179,"title":{},"body":{"injectables/GeoService.html":{}}}],["redis",{"_index":225,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{},"index.html":{}}}],["redis.service",{"_index":218,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis/redis.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_host=redis",{"_index":391,"title":{},"body":{"index.html":{}}}],["redis_port=6379",{"_index":392,"title":{},"body":{"index.html":{}}}],["redis_ttl_seconds=300",{"_index":393,"title":{},"body":{"index.html":{}}}],["redismodule",{"_index":41,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisservice",{"_index":144,"title":{"injectables/RedisService.html":{}},"body":{"injectables/GeoService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"coverage.html":{},"overview.html":{}}}],["reflect",{"_index":301,"title":{},"body":{"dependencies.html":{}}}],["registeralert",{"_index":141,"title":{},"body":{"injectables/GeoService.html":{}}}],["registeralert(type",{"_index":152,"title":{},"body":{"injectables/GeoService.html":{}}}],["registrados",{"_index":113,"title":{},"body":{"controllers/GeoController.html":{}}}],["registrar",{"_index":106,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{}}}],["registros",{"_index":353,"title":{},"body":{"index.html":{}}}],["repository",{"_index":317,"title":{},"body":{"index.html":{}}}],["requisitos",{"_index":372,"title":{},"body":{"index.html":{}}}],["reset",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["response",{"_index":270,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["response.data",{"_index":273,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["respuesta",{"_index":422,"title":{},"body":{"index.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["route",{"_index":203,"title":{},"body":{"injectables/GeoService.html":{}}}],["routeresult",{"_index":189,"title":{},"body":{"injectables/GeoService.html":{}}}],["routing",{"_index":194,"title":{},"body":{"injectables/GeoService.html":{}}}],["routing_service_url=http://routing",{"_index":395,"title":{},"body":{"index.html":{}}}],["routingclient",{"_index":145,"title":{},"body":{"injectables/GeoService.html":{}}}],["routingserviceclient",{"_index":42,"title":{"injectables/RoutingServiceClient.html":{}},"body":{"modules/AppModule.html":{},"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":403,"title":{},"body":{"index.html":{}}}],["ruta",{"_index":198,"title":{},"body":{"injectables/GeoService.html":{}}}],["rxjs",{"_index":304,"title":{},"body":{"dependencies.html":{}}}],["saved",{"_index":202,"title":{},"body":{"injectables/GeoService.html":{}}}],["service",{"_index":175,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["service:3002",{"_index":396,"title":{},"body":{"index.html":{}}}],["service:3003",{"_index":398,"title":{},"body":{"index.html":{}}}],["servicio",{"_index":324,"title":{},"body":{"index.html":{}}}],["set(key",{"_index":186,"title":{},"body":{"injectables/GeoService.html":{}}}],["setjson",{"_index":222,"title":{},"body":{"injectables/RedisService.html":{}}}],["setjson(key",{"_index":227,"title":{},"body":{"injectables/RedisService.html":{}}}],["setup",{"_index":401,"title":{},"body":{"index.html":{}}}],["si",{"_index":355,"title":{},"body":{"index.html":{}}}],["siguientes",{"_index":390,"title":{},"body":{"index.html":{}}}],["sistema",{"_index":331,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["src/.../main.ts",{"_index":311,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/http/routing.service",{"_index":157,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/common/http/routing.service.ts",{"_index":261,"title":{},"body":{"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["src/common/http/routing.service.ts:16",{"_index":267,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["src/common/http/routing.service.ts:7",{"_index":265,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["src/geo/geo.controller.ts",{"_index":99,"title":{},"body":{"controllers/GeoController.html":{},"coverage.html":{}}}],["src/geo/geo.controller.ts:17",{"_index":117,"title":{},"body":{"controllers/GeoController.html":{}}}],["src/geo/geo.service.ts",{"_index":136,"title":{},"body":{"injectables/GeoService.html":{},"coverage.html":{}}}],["src/geo/geo.service.ts:10",{"_index":155,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/geo.service.ts:11",{"_index":148,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/geo.service.ts:23",{"_index":150,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/geo.service.ts:70",{"_index":154,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/location.dto.ts",{"_index":71,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"coverage.html":{}}}],["src/geo/location.dto.ts:12",{"_index":78,"title":{},"body":{"classes/CoordinatesDto.html":{}}}],["src/geo/location.dto.ts:13",{"_index":79,"title":{},"body":{"classes/CoordinatesDto.html":{}}}],["src/geo/location.dto.ts:20",{"_index":211,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/geo/location.dto.ts:26",{"_index":212,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/geo/location.dto.ts:32",{"_index":209,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/main.ts",{"_index":284,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/redis/redis.module.ts",{"_index":216,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/redis/redis.service",{"_index":156,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/redis/redis.service.ts",{"_index":219,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/redis/redis.service.ts:27",{"_index":224,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:31",{"_index":226,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:6",{"_index":230,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:9",{"_index":223,"title":{},"body":{"injectables/RedisService.html":{}}}],["start",{"_index":405,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":408,"title":{},"body":{"index.html":{}}}],["start:proddeployment",{"_index":410,"title":{},"body":{"index.html":{}}}],["started",{"_index":313,"title":{"index.html":{}},"body":{}}],["starter",{"_index":316,"title":{},"body":{"index.html":{}}}],["statements",{"_index":278,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":131,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["success",{"_index":200,"title":{},"body":{"injectables/GeoService.html":{}}}],["summary",{"_index":130,"title":{},"body":{"controllers/GeoController.html":{}}}],["superior",{"_index":376,"title":{},"body":{"index.html":{}}}],["support",{"_index":442,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":443,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":306,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["table",{"_index":288,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":287,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":429,"title":{},"body":{"index.html":{}}}],["test",{"_index":438,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":440,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.auditurl",{"_index":161,"title":{},"body":{"injectables/GeoService.html":{}}}],["this.baseurl",{"_index":268,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.baseurl}/routing",{"_index":272,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.client",{"_index":255,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.on('error",{"_index":258,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.quit",{"_index":260,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.configservice.get('audit_service_url",{"_index":162,"title":{},"body":{"injectables/GeoService.html":{}}}],["this.configservice.get('redis_ttl",{"_index":159,"title":{},"body":{"injectables/GeoService.html":{}}}],["this.configservice.get('routing_service_url",{"_index":269,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.geoservice.processgps(dto",{"_index":135,"title":{},"body":{"controllers/GeoController.html":{}}}],["this.httpservice.axiosref.post",{"_index":271,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.httpservice.axiosref.post(`${this.auditurl}/alert",{"_index":204,"title":{},"body":{"injectables/GeoService.html":{}}}],["this.redisservice",{"_index":184,"title":{},"body":{"injectables/GeoService.html":{}}}],["this.redisservice.getclient().get(key",{"_index":167,"title":{},"body":{"injectables/GeoService.html":{}}}],["this.registeralert",{"_index":168,"title":{},"body":{"injectables/GeoService.html":{}}}],["this.routingclient.calculateroute(dto",{"_index":191,"title":{},"body":{"injectables/GeoService.html":{}}}],["this.ttl",{"_index":158,"title":{},"body":{"injectables/GeoService.html":{}}}],["throw",{"_index":235,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["timestamp",{"_index":234,"title":{},"body":{"injectables/RedisService.html":{}}}],["transformer",{"_index":85,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"dependencies.html":{}}}],["true",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/GeoService.html":{}}}],["try",{"_index":190,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RoutingServiceClient.html":{}}}],["ttl",{"_index":139,"title":{},"body":{"injectables/GeoService.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["type",{"_index":75,"title":{},"body":{"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["typescript",{"_index":250,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["ubicación",{"_index":178,"title":{},"body":{"injectables/GeoService.html":{}}}],["ui",{"_index":307,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["un",{"_index":330,"title":{},"body":{"index.html":{}}}],["una",{"_index":327,"title":{},"body":{"index.html":{}}}],["undefined})@isobject()@validatenested()@type(undefined",{"_index":208,"title":{},"body":{"classes/LocationDto.html":{}}}],["unitarias",{"_index":437,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":122,"title":{},"body":{"controllers/GeoController.html":{},"injectables/RoutingServiceClient.html":{}}}],["unlicensed",{"_index":451,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":252,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["usando",{"_index":369,"title":{},"body":{"index.html":{}}}],["v16",{"_index":374,"title":{},"body":{"index.html":{}}}],["validación",{"_index":363,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":83,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["validator",{"_index":84,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"dependencies.html":{},"index.html":{}}}],["variables",{"_index":382,"title":{},"body":{"index.html":{}}}],["veces",{"_index":362,"title":{},"body":{"index.html":{}}}],["vehículo",{"_index":356,"title":{},"body":{"index.html":{}}}],["version",{"_index":448,"title":{},"body":{"properties.html":{}}}],["versión",{"_index":380,"title":{},"body":{"index.html":{}}}],["void",{"_index":231,"title":{},"body":{"injectables/RedisService.html":{}}}],["watch",{"_index":406,"title":{},"body":{"index.html":{}}}],["world",{"_index":68,"title":{},"body":{"injectables/AppService.html":{}}}],["y",{"_index":333,"title":{},"body":{"index.html":{}}}],["ya",{"_index":176,"title":{},"body":{"injectables/GeoService.html":{}}}],["zoom",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRoutingServiceClient \n\nRoutingServiceClient \n\nRoutingServiceClient  -->\n\nAppModule->RoutingServiceClient \n\n\n\n\n\nGeoService\n\nGeoService\n\nAppModule -->\n\nGeoService->AppModule\n\n\n\n\n\nRoutingServiceClient\n\nRoutingServiceClient\n\nAppModule -->\n\nRoutingServiceClient->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GeoService\n                        \n                        \n                            RoutingServiceClient\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GeoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoutingServiceClient\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RedisModule } from './redis/redis.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { HttpModule } from '@nestjs/axios';\nimport { GeoService } from './geo/geo.service';\nimport { GeoController } from './geo/geo.controller';\nimport { RoutingServiceClient } from './common/http/routing.service';\n\n@Module({\n  imports: [\n    RedisModule,\n    ConfigModule.forRoot({\n      envFilePath: '.env',\n      isGlobal: true,\n    }),\n    HttpModule,\n  ],\n  controllers: [GeoController],\n  providers: [GeoService, RoutingServiceClient],\n  exports: [RoutingServiceClient],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoordinatesDto.html":{"url":"classes/CoordinatesDto.html","title":"class - CoordinatesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoordinatesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/location.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                lat\n                            \n                            \n                                    \n                                lng\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsObject,\n  ValidateNested,\n  IsNumber,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nclass CoordinatesDto {\n  @IsNumber() lat: number;\n  @IsNumber() lng: number;\n}\n\nexport class LocationDto {\n  @ApiProperty({ example: 'JJW-322' })\n  @IsString()\n  @IsNotEmpty()\n  deviceId: string;\n\n  @ApiProperty({ example: { lat: 4.123, lng: -74.123 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  origin: CoordinatesDto;\n\n  @ApiProperty({ example: { lat: 4.567, lng: -74.567 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  destination: CoordinatesDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GeoController.html":{"url":"controllers/GeoController.html","title":"controller - GeoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GeoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                geo\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                handleGPSData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        handleGPSData\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGPSData(dto: LocationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Registrar geolocatión GPS'})@ApiResponse({status: 201, description: 'Datos GPS registrados correctamente.'})@ApiResponse({status: 400, description: 'Datos inválidos.'})\n                \n            \n\n                    \n                        \n                            Defined in src/geo/geo.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LocationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { GeoService } from './geo.service';\nimport { LocationDto } from './location.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@Controller('geo')\nexport class GeoController {\n  constructor(private readonly geoService: GeoService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Registrar geolocatión GPS' })\n  @ApiResponse({\n    status: 201,\n    description: 'Datos GPS registrados correctamente.',\n  })\n  @ApiResponse({ status: 400, description: 'Datos inválidos.' })\n  async handleGPSData(@Body() dto: LocationDto) {\n    return await this.geoService.processGps(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GeoService.html":{"url":"injectables/GeoService.html","title":"injectable - GeoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GeoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                auditUrl\n                            \n                            \n                                    Private\n                                ttl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                processGps\n                            \n                            \n                                    Private\n                                    Async\n                                registerAlert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisService: RedisService, routingClient: RoutingServiceClient, httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/geo/geo.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        routingClient\n                                                  \n                                                        \n                                                                        RoutingServiceClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processGps\n                        \n                    \n                \n            \n            \n                \n                        \n                    processGps(dto: LocationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/geo/geo.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LocationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        registerAlert\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerAlert(type: string, message: string, source: string, deviceId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/geo/geo.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                deviceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        auditUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/geo/geo.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ttl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/geo/geo.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { RedisService } from 'src/redis/redis.service';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RoutingServiceClient } from 'src/common/http/routing.service';\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = await this.routingClient.calculateRoute(dto);\n    } catch (err) {\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${err.message}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (err) {\n      console.error('Error al registrar alerta:', err.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocationDto.html":{"url":"classes/LocationDto.html","title":"class - LocationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/location.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                destination\n                            \n                            \n                                    \n                                    \n                                    \n                                deviceId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                origin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CoordinatesDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deviceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'JJW-322'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        origin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CoordinatesDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsObject,\n  ValidateNested,\n  IsNumber,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nclass CoordinatesDto {\n  @IsNumber() lat: number;\n  @IsNumber() lng: number;\n}\n\nexport class LocationDto {\n  @ApiProperty({ example: 'JJW-322' })\n  @IsString()\n  @IsNotEmpty()\n  deviceId: string;\n\n  @ApiProperty({ example: { lat: 4.123, lng: -74.123 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  origin: CoordinatesDto;\n\n  @ApiProperty({ example: { lat: 4.567, lng: -74.567 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  destination: CoordinatesDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { RedisService } from './redis.service';\n\n@Global()\n@Module({\n  providers: [RedisService],\n  exports: [RedisService],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getClient\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                setJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/redis/redis.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Redis\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setJson\n                        \n                    \n                \n            \n            \n                \nsetJson(key: string, arg1: literal type, ttl: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                arg1\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/redis/redis.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy } from '@nestjs/common';\nimport Redis from 'ioredis';\n\n@Injectable()\nexport class RedisService implements OnModuleDestroy {\n  setJson(key: string, arg1: { deviceId: string; lat: number; lng: number; timestamp: number; }, ttl: number) {\n    throw new Error('Method not implemented.');\n  }\n  private client: Redis;\n\n  constructor() {\n    const host = process.env.REDIS_HOST || 'localhost';\n    const port = parseInt(process.env.REDIS_PORT || '6379', 10);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n    this.client = new Redis({\n      host,\n      port,\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    this.client.on('error', (err: Error) => {\n      console.error('Redis error:', err);\n    });\n  }\n\n  getClient(): Redis {\n    return this.client;\n  }\n\n  async onModuleDestroy() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    await this.client.quit();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutingServiceClient.html":{"url":"injectables/RoutingServiceClient.html","title":"injectable - RoutingServiceClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutingServiceClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/http/routing.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                calculateRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/http/routing.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        calculateRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateRoute(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/http/routing.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/http/routing.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RoutingServiceClient {\n  private readonly baseUrl: string;\n\n  constructor(\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.baseUrl = this.configService.get('ROUTING_SERVICE_URL') ?? '';\n  }\n\n  async calculateRoute(payload: {\n    deviceId: string;\n    origin: { lat: number; lng: number };\n    destination: { lat: number; lng: number };\n  }) {\n    try {\n      const response = await this.httpService.axiosRef.post(\n        `${this.baseUrl}/routing`,\n        payload,\n      );\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return response.data;\n    } catch (err) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      throw new Error(`Routing service error: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/http/routing.service.ts\n            \n            injectable\n            RoutingServiceClient\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/geo/geo.controller.ts\n            \n            controller\n            GeoController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            injectable\n            GeoService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/geo/location.dto.ts\n            \n            class\n            CoordinatesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/geo/location.dto.ts\n            \n            class\n            LocationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.1.4\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ioredis : ^5.6.1\n        \n            redis : ^4.7.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescription\nNest framework TypeScript starter repository.\nMicroservicio de auditoría\nEl microservicio de Geolocalización :\nEste servicio forma parte de una arquitectura de microservicios para un sistema de monitoreo y control de flotas, y actúa servicio de geolocalización.\nEstá construido con NestJS.\nCaracterísticas\n\nRecibe datos GPS (HTTP POST) y los almacena en Redis (TTL: 5 minutos). \nImplementar un mecanismo de duplicación para evitar registros duplicados si un vehículo envía la misma coordenada múltiples veces. \nValidación de datos mediante DTOs y class-validator.\nSwagger API Documentation.\nPersistencia en PostgreSQL usando Prisma ORM.\n\nRequisitos\n\nNode.js (v16 o superior)\nnpm\nDocker y Docker Compose (para la versión containerizada)\n\nVariables de entorno\nCrear un archivo .env en la raíz del proyecto con las siguientes variables:\nExample :REDIS_HOST=redis\nREDIS_PORT=6379\nREDIS_TTL_SECONDS=300\nPORT=3001\nROUTING_SERVICE_URL=http://routing-service:3002\nAUDIT_SERVICE_URL=http://audit-service:3003\nDownload the repository\nExample :$Project setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodDeployment\nEndpoints\nAudit Alerts\nExample :POST /geoParámetros de consulta:\nExample :{\n    \"deviceId\": \"AZD-223\",\n    \"origin\": {\n        \"lat\": 5.5225,\n        \"lng\": 8.2225\n    },\n    \"destination\": {\n        \"lat\": 4.1225,\n        \"lng\": 10.1225\n    }\n}Respuesta:\nExample :Documentación API\nLa documentación de la API está disponible en Swagger UI:\nhttp://localhost:3001/api/docs\nLa documentación de la API está disponible en CompoDoc UI:\nhttp://localhost:3001/docs/\nIncluye:\nTags por módulo (Alert)\nEjemplos de payloads\nPruebas\nExample :# Ejecutar pruebas unitarias\nnpm run test\n\n# Ejecutar pruebas con cobertura\nnpm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRoutingServiceClient \n\nRoutingServiceClient \n\nRoutingServiceClient  -->\n\nAppModule->RoutingServiceClient \n\n\n\n\n\nGeoService\n\nGeoService\n\nAppModule -->\n\nGeoService->AppModule\n\n\n\n\n\nRoutingServiceClient\n\nRoutingServiceClient\n\nAppModule -->\n\nRoutingServiceClient->AppModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
