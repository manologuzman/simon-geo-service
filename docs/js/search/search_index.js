var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.437,1,1.906]],["body/controllers/AppController.html",[0,2.341,1,3.104,2,2.175,3,0.571,4,0.571,5,0.48,6,2.98,7,0.571,8,2.059,9,4.156,10,2.175,11,0.048,12,1.303,13,3.68,14,1.671,15,1.096,16,0.704,17,0.669,18,2.905,19,3.68,20,0.571,21,0.165,22,2.98,23,1.303,24,1.014,25,3.68,26,0.039,27,0.039]],["title/modules/AppModule.html",[28,1.437,29,1.646]],["body/modules/AppModule.html",[2,2.319,3,0.456,4,0.456,5,0.383,11,0.049,16,0.801,17,0.534,20,0.456,21,0.132,26,0.034,27,0.034,28,2.281,29,3.198,30,1.517,31,1.517,32,2.011,33,2.011,34,1.517,35,3.025,36,3.025,37,2.38,38,2.38,39,2.38,40,2.38,41,2.61,42,1.501,43,1.393,44,2.687,45,2.011,46,2.011,47,2.938,48,2.612,49,3.925,50,2.938,51,2.938,52,1.041,53,3.925,54,1.041,55,2.938,56,2.938,57,2.938,58,2.938,59,2.938,60,2.38,61,2.938,62,1.177]],["title/injectables/AppService.html",[18,1.646,63,0.506]],["body/injectables/AppService.html",[3,0.595,4,0.595,5,0.5,7,0.595,8,2.111,9,4.215,11,0.048,12,1.358,14,1.741,15,1.123,16,0.595,17,0.697,18,2.748,20,0.595,21,0.172,24,1.056,26,0.04,27,0.04,63,0.846,64,1.979,65,3.105,66,3.835,67,3.835,68,3.835]],["title/classes/CoordinatesDto.html",[21,0.125,69,1.646]],["body/classes/CoordinatesDto.html",[3,0.468,4,0.468,5,0.394,7,0.468,10,2.361,11,0.049,12,1.415,15,0.729,16,0.695,20,0.468,21,0.214,26,0.034,27,0.034,69,3.011,70,2.066,71,2.066,72,0.965,73,1.366,74,1.366,75,1.198,76,1.491,77,4.015,78,3.018,79,3.018,80,3.235,81,3.235,82,3.627,83,3.627,84,1.783,85,2.066,86,3.86,87,1.783,88,0.831,89,3.066,90,2.444,91,2.444,92,0.831,93,2.444,94,2.444,95,0.729,96,2.444,97,2.444,98,0.729]],["title/interfaces/Destination.html",[98,0.673,99,0.767]],["body/interfaces/Destination.html",[3,0.293,4,0.536,5,0.246,7,0.293,11,0.049,15,1.094,16,0.677,17,0.343,20,0.444,21,0.085,23,1.365,24,0.951,26,0.024,27,0.024,42,0.788,43,0.519,52,0.668,54,0.668,62,0.756,63,0.52,72,0.691,73,1.247,74,1.247,75,0.931,76,1.569,88,0.788,92,1.061,95,0.834,98,1,99,1.061,100,0.974,101,0.856,102,0.856,103,0.951,104,0.974,105,1.568,106,1.568,107,0.974,108,1.146,109,1.365,110,1.544,111,0.856,112,1.815,113,0.756,114,0.974,115,0.756,116,0.974,117,1.476,118,0.974,119,0.856,120,0.974,121,0.974,122,1.013,123,0.974,124,0.974,125,1.66,126,0.856,127,0.974,128,1.476,129,1.476,130,1.476,131,1.544,132,0.974,133,1.476,134,1.568,135,1.476,136,0.974,137,0.974,138,0.974,139,0.856,140,1.989,141,1.298,142,1.989,143,0.974,144,0.974,145,0.974,146,0.974,147,0.856,148,0.974,149,0.974,150,0.856,151,0.974,152,0.974,153,0.974,154,1.783,155,1.298,156,0.974,157,0.856,158,0.756,159,1.298,160,1.75,161,1.75,162,1.298,163,1.869,164,1.298,165,1.298,166,0.974,167,1.783,168,1.476,169,1.476,170,0.856,171,0.856,172,0.856,173,0.974,174,0.974,175,0.974,176,0.856,177,0.974]],["title/controllers/GeoController.html",[0,1.437,48,1.646]],["body/controllers/GeoController.html",[0,1.535,2,1.757,3,0.462,4,0.462,5,0.388,7,0.462,8,1.796,10,1.757,11,0.048,12,1.053,14,1.35,16,0.736,17,0.541,20,0.462,21,0.134,22,2.408,23,1.053,24,0.819,26,0.034,27,0.034,43,1.224,48,2.338,75,0.718,87,1.757,88,1.305,102,1.35,110,1.585,122,1.574,131,1.053,134,1.35,157,1.796,158,1.191,176,1.796,178,2.408,179,2.973,180,3.956,181,2.973,182,2.973,183,3.956,184,2.973,185,3.956,186,3.244,187,3.837,188,3.6,189,3.956,190,2.973,191,3.956,192,3.956,193,2.973,194,1.757,195,1.757,196,1.757,197,3.203,198,2.973,199,2.973,200,3.956,201,4.445,202,2.973,203,2.973,204,2.973,205,2.973,206,2.973]],["title/injectables/GeoService.html",[43,0.767,63,0.506]],["body/injectables/GeoService.html",[3,0.255,4,0.604,5,0.214,7,0.255,8,1.167,11,0.049,12,1.377,14,1.167,15,1.228,16,0.64,17,0.299,20,0.399,21,0.074,23,1.269,24,0.872,26,0.022,27,0.022,42,0.987,43,0.708,52,0.582,54,0.582,62,0.658,63,0.467,64,0.848,72,0.621,73,0.987,74,0.987,75,1.077,76,1.434,88,0.987,92,1.136,95,0.765,98,0.865,99,0.987,101,0.746,102,0.746,103,1.136,104,0.848,105,1.957,106,1.957,107,0.848,108,1.03,109,1.269,110,1.436,111,0.746,112,1.973,113,1.269,114,1.635,115,1.03,116,1.635,117,1.327,118,0.848,119,0.746,120,0.848,121,0.848,122,1.46,123,1.327,124,1.327,125,1.558,126,0.746,127,0.848,128,1.327,129,1.327,130,1.327,131,1.46,132,0.848,133,1.327,134,1.438,135,1.327,136,0.848,137,0.848,138,0.848,139,0.746,140,1.849,141,1.167,142,2.129,143,0.848,144,0.848,145,0.848,146,0.848,147,0.746,148,0.848,149,0.848,150,0.746,151,0.848,152,0.848,153,0.848,154,1.635,155,1.167,156,0.848,157,1.167,158,0.658,159,1.167,160,1.627,161,1.627,162,1.167,163,1.787,164,1.167,165,1.167,166,0.848,167,1.635,168,1.327,169,1.327,170,0.746,171,0.746,172,0.746,173,1.635,174,0.848,175,0.848,176,0.746,177,0.848,194,1.872,195,1.872,196,1.872,207,2.571,208,1.643,209,2.571,210,1.643,211,1.643,212,1.643,213,1.643]],["title/classes/LocationDto.html",[21,0.125,88,0.767]],["body/classes/LocationDto.html",[3,0.45,4,0.45,5,0.378,7,0.45,10,2.593,11,0.049,12,1.554,15,0.939,16,0.681,20,0.45,21,0.211,26,0.033,27,0.033,69,3.04,70,1.982,71,1.982,72,0.939,73,1.208,74,1.208,75,1.216,76,1.215,77,3.553,80,3.148,81,3.148,82,3.553,83,3.553,84,1.711,85,1.982,86,3.797,87,1.711,88,1.071,89,3.003,90,3.148,91,2.345,92,1.208,93,2.345,94,2.345,95,1.06,96,2.345,97,2.345,98,1.06,214,4.387,215,3.887,216,2.896,217,2.896,218,2.896,219,2.896]],["title/interfaces/Origin.html",[95,0.673,99,0.767]],["body/interfaces/Origin.html",[3,0.293,4,0.536,5,0.246,7,0.293,11,0.049,15,1.094,16,0.677,17,0.343,20,0.444,21,0.085,23,1.365,24,0.951,26,0.024,27,0.024,42,0.788,43,0.519,52,0.668,54,0.668,62,0.756,63,0.52,72,0.691,73,1.247,74,1.247,75,0.931,76,1.569,88,0.788,92,1.061,95,0.931,98,0.931,99,1.061,100,0.974,101,0.856,102,0.856,103,0.951,104,0.974,105,1.568,106,1.568,107,0.974,108,1.146,109,1.365,110,1.544,111,0.856,112,1.815,113,0.756,114,0.974,115,0.756,116,0.974,117,1.476,118,0.974,119,0.856,120,0.974,121,0.974,122,1.013,123,0.974,124,0.974,125,1.66,126,0.856,127,0.974,128,1.476,129,1.476,130,1.476,131,1.544,132,0.974,133,1.476,134,1.568,135,1.476,136,0.974,137,0.974,138,0.974,139,0.856,140,1.989,141,1.298,142,1.989,143,0.974,144,0.974,145,0.974,146,0.974,147,0.856,148,0.974,149,0.974,150,0.856,151,0.974,152,0.974,153,0.974,154,1.783,155,1.298,156,0.974,157,0.856,158,0.756,159,1.298,160,1.75,161,1.75,162,1.298,163,1.869,164,1.298,165,1.298,166,0.974,167,1.783,168,1.476,169,1.476,170,0.856,171,0.856,172,0.856,173,0.974,174,0.974,175,0.974,176,0.856,177,0.974]],["title/modules/RedisModule.html",[28,1.437,41,1.437]],["body/modules/RedisModule.html",[3,0.543,4,0.543,5,0.457,11,0.047,16,0.683,17,0.637,20,0.543,21,0.157,26,0.038,27,0.038,28,2.481,30,1.807,31,1.807,32,2.396,33,2.396,34,1.807,35,3.29,36,3.29,41,2.777,44,3.01,45,2.396,46,2.396,103,1.539,220,2.835,221,2.835,222,2.835,223,3.501,224,4.397,225,3.501]],["title/injectables/RedisService.html",[63,0.506,103,0.767]],["body/injectables/RedisService.html",[3,0.368,4,0.368,5,0.309,7,0.368,8,1.536,11,0.048,12,1.611,14,1.791,15,1.039,16,0.525,17,0.431,20,0.368,21,0.106,24,0.653,26,0.029,27,0.029,63,0.615,64,1.224,72,0.817,73,0.653,74,0.653,75,1.039,76,1.479,92,0.653,103,0.932,112,1.581,113,1.581,115,1.581,122,1.397,125,1.356,126,1.076,131,0.839,150,1.954,163,1.356,194,1.401,195,1.401,196,1.401,226,1.92,227,3.946,228,4.731,229,3.384,230,3.384,231,2.371,232,3.239,233,2.371,234,3.384,235,3.946,236,2.74,237,2.371,238,2.371,239,1.92,240,2.371,241,2.371,242,1.92,243,2.316,244,2.371,245,2.371,246,3.384,247,2.371,248,2.371,249,3.384,250,2.371,251,2.371,252,2.371,253,3.946,254,3.946,255,3.946,256,3.946,257,3.944,258,4.87,259,4.87,260,3.384,261,3.946,262,3.384,263,3.384,264,3.384,265,2.371,266,3.384,267,2.371,268,2.371]],["title/interfaces/Route.html",[99,0.767,109,0.986]],["body/interfaces/Route.html",[3,0.293,4,0.536,5,0.246,7,0.293,11,0.049,15,1.094,16,0.677,17,0.343,20,0.444,21,0.085,23,1.365,24,0.951,26,0.024,27,0.024,42,0.788,43,0.519,52,0.668,54,0.668,62,0.756,63,0.52,72,0.691,73,1.247,74,1.247,75,0.931,76,1.569,88,0.788,92,1.061,95,0.834,98,0.931,99,1.061,100,0.974,101,0.856,102,0.856,103,0.951,104,0.974,105,1.568,106,1.568,107,0.974,108,1.146,109,1.467,110,1.544,111,0.856,112,1.815,113,0.756,114,0.974,115,0.756,116,0.974,117,1.476,118,0.974,119,0.856,120,0.974,121,0.974,122,1.013,123,0.974,124,0.974,125,1.66,126,0.856,127,0.974,128,1.476,129,1.476,130,1.476,131,1.544,132,0.974,133,1.476,134,1.568,135,1.476,136,0.974,137,0.974,138,0.974,139,0.856,140,1.989,141,1.298,142,1.989,143,0.974,144,0.974,145,0.974,146,0.974,147,0.856,148,0.974,149,0.974,150,0.856,151,0.974,152,0.974,153,0.974,154,1.783,155,1.298,156,0.974,157,0.856,158,0.756,159,1.298,160,1.75,161,1.75,162,1.298,163,1.869,164,1.298,165,1.298,166,0.974,167,1.783,168,1.476,169,1.476,170,0.856,171,0.856,172,0.856,173,0.974,174,0.974,175,0.974,176,0.856,177,0.974]],["title/interfaces/RoutingResonceZ.html",[99,0.767,108,1.116]],["body/interfaces/RoutingResonceZ.html",[3,0.278,4,0.519,5,0.234,7,0.278,11,0.049,15,1.181,16,0.663,17,0.326,20,0.427,21,0.08,23,1.329,24,0.922,26,0.024,27,0.024,42,0.757,43,0.494,52,0.635,54,0.635,62,0.718,63,0.5,72,0.664,73,1.034,74,1.034,75,1.109,76,1.502,88,0.757,92,1.225,95,1.109,98,1.137,99,1.034,100,0.925,101,0.814,102,0.814,103,0.922,104,0.925,105,1.519,106,1.519,107,0.925,108,1.341,109,1.667,110,1.783,111,1.704,112,1.783,113,0.718,114,0.925,115,0.718,116,0.925,117,1.42,118,0.925,119,0.814,120,0.925,121,0.925,122,0.974,123,0.925,124,0.925,125,1.622,126,0.814,127,0.925,128,1.42,129,1.42,130,1.42,131,1.513,132,0.925,133,1.42,134,1.519,135,1.42,136,0.925,137,0.925,138,0.925,139,0.814,140,1.937,141,1.248,142,1.937,143,0.925,144,0.925,145,0.925,146,0.925,147,0.814,148,0.925,149,0.925,150,0.814,151,0.925,152,0.925,153,0.925,154,1.727,155,1.248,156,0.925,157,0.814,158,0.718,159,1.248,160,1.704,161,1.704,162,1.248,163,1.839,164,1.248,165,1.248,166,0.925,167,1.727,168,1.42,169,1.42,170,0.814,171,0.814,172,0.814,173,0.925,174,0.925,175,0.925,176,0.814,177,0.925]],["title/injectables/RoutingServiceClient.html",[42,0.767,63,0.506]],["body/injectables/RoutingServiceClient.html",[3,0.407,4,0.407,5,0.342,7,0.407,8,1.65,11,0.049,12,1.476,14,1.191,15,1.007,16,0.647,17,0.477,20,0.407,21,0.118,23,1.673,24,0.723,26,0.031,27,0.031,42,1.001,52,0.929,54,0.929,63,0.661,64,1.355,72,0.878,73,1.001,74,1.001,75,1.141,76,1.407,92,0.723,95,0.634,98,0.634,105,2.219,106,2.276,112,1.894,115,1.456,122,1.476,125,1.456,131,0.929,141,1.191,147,1.65,155,1.191,158,1.052,159,1.191,160,1.65,161,1.65,162,1.191,163,1.671,164,1.191,165,1.191,194,2.148,195,2.148,196,2.148,236,2.943,242,2.125,243,1.796,269,2.125,270,4.169,271,3.634,272,2.624,273,3.634,274,3.634,275,2.624,276,2.624,277,2.624,278,2.624,279,2.624,280,2.624,281,2.624,282,2.624]],["title/coverage.html",[283,3.065]],["body/coverage.html",[0,2.143,1,2.191,5,0.417,6,2.592,11,0.048,18,1.891,21,0.186,26,0.036,27,0.036,34,1.652,42,0.881,43,0.881,48,1.891,63,0.887,65,2.592,69,1.891,71,2.842,75,0.773,88,0.881,95,0.773,98,0.773,99,1.343,101,2.294,103,0.881,108,1.282,109,1.133,178,2.592,226,2.592,243,2.191,269,2.592,283,2.592,284,2.592,285,3.2,286,3.2,287,5.547,288,4.608,289,4.152,290,4.152,291,4.877,292,3.2,293,2.592,294,3.2,295,3.2,296,3.2,297,3.2]],["title/dependencies.html",[31,1.727,298,1.889]],["body/dependencies.html",[11,0.049,17,0.669,21,0.204,26,0.039,27,0.039,31,1.9,52,1.303,54,1.303,84,2.175,85,2.519,87,2.175,232,2.519,239,2.98,299,3.68,300,4.916,301,3.68,302,3.68,303,3.68,304,4.535,305,3.68,306,3.68,307,3.68,308,3.68,309,3.68,310,3.68,311,3.68,312,3.68,313,3.68,314,3.68,315,2.98,316,2.98,317,3.68]],["title/miscellaneous/functions.html",[318,1.889,319,2.709]],["body/miscellaneous/functions.html",[7,0.664,11,0.042,26,0.042,27,0.042,34,2.705,293,3.461,318,3.461,319,3.461,320,4.274]],["title/index.html",[7,0.362,321,2.333,322,2.333]],["body/index.html",[11,0.047,21,0.089,26,0.025,27,0.025,60,1.609,62,0.796,73,1.167,74,1.167,84,1.174,89,3.244,92,0.819,95,0.718,98,0.718,109,1.053,110,1.192,111,0.902,113,0.796,119,0.902,139,1.618,170,1.35,171,0.902,172,0.902,186,1.36,187,2.408,188,1.609,197,2.408,232,1.36,257,1.609,284,1.609,315,2.408,316,2.408,323,1.987,324,1.987,325,1.987,326,2.974,327,2.974,328,5.178,329,1.987,330,1.987,331,2.974,332,1.987,333,2.974,334,1.987,335,1.987,336,1.987,337,1.987,338,1.987,339,3.956,340,1.987,341,1.987,342,4.236,343,1.987,344,1.987,345,1.987,346,3.564,347,1.987,348,3.564,349,1.987,350,1.987,351,1.987,352,1.987,353,1.987,354,1.987,355,4.236,356,1.987,357,1.987,358,1.987,359,1.987,360,1.987,361,1.987,362,1.987,363,1.987,364,1.987,365,1.987,366,1.987,367,4.609,368,1.987,369,1.987,370,1.987,371,1.987,372,1.987,373,1.987,374,1.987,375,3.956,376,1.987,377,1.987,378,1.987,379,1.987,380,1.987,381,1.987,382,1.987,383,1.987,384,1.987,385,1.987,386,4.609,387,2.974,388,1.987,389,1.987,390,1.987,391,2.974,392,1.987,393,1.987,394,1.987,395,1.987,396,1.987,397,1.987,398,1.987,399,1.987,400,1.987,401,1.987,402,1.987,403,1.987,404,1.987,405,1.987,406,1.987,407,1.987,408,2.974,409,1.987,410,1.987,411,4.446,412,1.987,413,1.987,414,1.987,415,2.974,416,1.987,417,1.987,418,1.987,419,1.987,420,1.987,421,1.987,422,1.987,423,1.987,424,1.987,425,2.974,426,1.987,427,1.987,428,1.987,429,1.987,430,1.987,431,1.987,432,1.987,433,1.987,434,1.987,435,1.987,436,1.987,437,1.987,438,3.564,439,2.974,440,1.987,441,1.987,442,1.987,443,1.987,444,1.987,445,1.987,446,1.987,447,1.987,448,1.987,449,1.987,450,3.564,451,2.974,452,1.987,453,1.987,454,1.987,455,1.987]],["title/modules.html",[30,1.954]],["body/modules.html",[11,0.042,26,0.042,27,0.042,29,2.494,30,2.179,41,2.179,456,4.924,457,4.924,458,4.924,459,4.924]],["title/overview.html",[460,3.065]],["body/overview.html",[2,2.02,11,0.046,26,0.037,27,0.037,28,1.764,29,3.23,30,1.764,31,1.764,32,2.339,33,2.339,34,1.764,35,2.339,36,2.339,37,2.768,38,2.768,39,2.768,40,2.768,41,2.72,42,1.474,43,1.309,44,2.964,45,2.339,46,2.339,64,1.764,70,2.339,100,1.764,103,1.474,220,2.768,221,2.768,222,2.768,460,2.768,461,4.754,462,4.33]],["title/properties.html",[72,0.808,298,1.889]],["body/properties.html",[11,0.047,26,0.042,27,0.042,72,1.019,186,2.889,463,4.221,464,4.221,465,4.221,466,4.221,467,4.221]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":287,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":464,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":307,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":312,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":306,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":295,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":288,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":291,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":289,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":290,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":292,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":252,"title":{},"body":{"injectables/RedisService.html":{}}}],["10.1225",{"_index":429,"title":{},"body":{"index.html":{}}}],["11.0.1",{"_index":300,"title":{},"body":{"dependencies.html":{}}}],["11.1.4",{"_index":305,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":461,"title":{},"body":{"overview.html":{}}}],["201",{"_index":185,"title":{},"body":{"controllers/GeoController.html":{}}}],["22.1225",{"_index":434,"title":{},"body":{"index.html":{}}}],["223",{"_index":425,"title":{},"body":{"index.html":{}}}],["300",{"_index":119,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["322",{"_index":91,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["322'})@isstring()@isnotempty",{"_index":217,"title":{},"body":{"classes/LocationDto.html":{}}}],["38.8225",{"_index":436,"title":{},"body":{"index.html":{}}}],["4",{"_index":462,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":299,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":301,"title":{},"body":{"dependencies.html":{}}}],["4.1225",{"_index":428,"title":{},"body":{"index.html":{}}}],["4.123",{"_index":93,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["4.567",{"_index":96,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["4.7.0",{"_index":309,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":191,"title":{},"body":{"controllers/GeoController.html":{}}}],["49.1225",{"_index":435,"title":{},"body":{"index.html":{}}}],["5",{"_index":356,"title":{},"body":{"index.html":{}}}],["5.0.1",{"_index":317,"title":{},"body":{"dependencies.html":{}}}],["5.5225",{"_index":426,"title":{},"body":{"index.html":{}}}],["5.6.1",{"_index":308,"title":{},"body":{"dependencies.html":{}}}],["55.5225",{"_index":432,"title":{},"body":{"index.html":{}}}],["6379",{"_index":251,"title":{},"body":{"injectables/RedisService.html":{}}}],["67.1725",{"_index":437,"title":{},"body":{"index.html":{}}}],["7.8.1",{"_index":314,"title":{},"body":{"dependencies.html":{}}}],["74.123",{"_index":94,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["74.567",{"_index":97,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["8.2225",{"_index":427,"title":{},"body":{"index.html":{}}}],["85.2225",{"_index":433,"title":{},"body":{"index.html":{}}}],["access",{"_index":264,"title":{},"body":{"injectables/RedisService.html":{}}}],["actúa",{"_index":345,"title":{},"body":{"index.html":{}}}],["al",{"_index":167,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["alert",{"_index":447,"title":{},"body":{"index.html":{}}}],["alerta",{"_index":177,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["alerts",{"_index":421,"title":{},"body":{"index.html":{}}}],["almacena",{"_index":354,"title":{},"body":{"index.html":{}}}],["api",{"_index":375,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":200,"title":{},"body":{"controllers/GeoController.html":{}}}],["apiproperty",{"_index":86,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["apiproperty({example",{"_index":214,"title":{},"body":{"classes/LocationDto.html":{}}}],["apiresponse",{"_index":201,"title":{},"body":{"controllers/GeoController.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["archivo",{"_index":394,"title":{},"body":{"index.html":{}}}],["arg1",{"_index":235,"title":{},"body":{"injectables/RedisService.html":{}}}],["arquitectura",{"_index":337,"title":{},"body":{"index.html":{}}}],["assignment",{"_index":260,"title":{},"body":{"injectables/RedisService.html":{}}}],["async",{"_index":122,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["audit",{"_index":420,"title":{},"body":{"index.html":{}}}],["audit_service_url=http://audit",{"_index":405,"title":{},"body":{"index.html":{}}}],["auditoría",{"_index":329,"title":{},"body":{"index.html":{}}}],["auditurl",{"_index":114,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["author",{"_index":467,"title":{},"body":{"properties.html":{}}}],["await",{"_index":131,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["azd",{"_index":424,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":270,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["body",{"_index":198,"title":{},"body":{"controllers/GeoController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":459,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":456,"title":{},"body":{"modules.html":{}}}],["cachettl",{"_index":111,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["calcular",{"_index":168,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["calculateroute",{"_index":271,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["calculateroute(payload",{"_index":274,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["call",{"_index":261,"title":{},"body":{"injectables/RedisService.html":{}}}],["características",{"_index":350,"title":{},"body":{"index.html":{}}}],["catch",{"_index":159,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["class",{"_index":21,"title":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":70,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"overview.html":{}}}],["client",{"_index":227,"title":{},"body":{"injectables/RedisService.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_exports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_redismodule",{"_index":220,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":221,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":222,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cobertura",{"_index":454,"title":{},"body":{"index.html":{}}}],["common/http/routing.service",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["compodoc",{"_index":441,"title":{},"body":{"index.html":{}}}],["compose",{"_index":388,"title":{},"body":{"index.html":{}}}],["con",{"_index":348,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":106,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["console.error('error",{"_index":175,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["console.error('redis",{"_index":267,"title":{},"body":{"injectables/RedisService.html":{}}}],["const",{"_index":125,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["constructor",{"_index":115,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["constructor(httpservice",{"_index":272,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/GeoController.html":{}}}],["constructor(redisservice",{"_index":208,"title":{},"body":{"injectables/GeoService.html":{}}}],["construido",{"_index":347,"title":{},"body":{"index.html":{}}}],["consulta",{"_index":423,"title":{},"body":{"index.html":{}}}],["containerizada",{"_index":390,"title":{},"body":{"index.html":{}}}],["control",{"_index":343,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/GeoController.html":{}},"body":{"controllers/AppController.html":{},"controllers/GeoController.html":{},"coverage.html":{}}}],["controller('geo",{"_index":202,"title":{},"body":{"controllers/GeoController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/GeoController.html":{},"overview.html":{}}}],["coordenada",{"_index":369,"title":{},"body":{"index.html":{}}}],["coordinatesdto",{"_index":69,"title":{"classes/CoordinatesDto.html":{}},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"coverage.html":{}}}],["correctamente",{"_index":204,"title":{},"body":{"controllers/GeoController.html":{}}}],["correctamente.'})@apiresponse({status",{"_index":190,"title":{},"body":{"controllers/GeoController.html":{}}}],["coverage",{"_index":283,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crear",{"_index":393,"title":{},"body":{"index.html":{}}}],["data",{"_index":171,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["datos",{"_index":187,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{}}}],["de",{"_index":328,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"classes/LocationDto.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["del",{"_index":396,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desconocido",{"_index":165,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["description",{"_index":186,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":98,"title":{"interfaces/Destination.html":{}},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"index.html":{}}}],["detectado",{"_index":138,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["detected",{"_index":136,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["development",{"_index":412,"title":{},"body":{"index.html":{}}}],["deviceid",{"_index":92,"title":{},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["disable",{"_index":254,"title":{},"body":{"injectables/RedisService.html":{}}}],["disponible",{"_index":439,"title":{},"body":{"index.html":{}}}],["docker",{"_index":387,"title":{},"body":{"index.html":{}}}],["documentación",{"_index":438,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":284,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["download",{"_index":407,"title":{},"body":{"index.html":{}}}],["dto",{"_index":157,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["dto.destination",{"_index":148,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["dto.deviceid",{"_index":140,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["dto.origin.lat",{"_index":128,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["dto.origin.lng",{"_index":129,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["dtos",{"_index":374,"title":{},"body":{"index.html":{}}}],["duplicación",{"_index":360,"title":{},"body":{"index.html":{}}}],["duplicado",{"_index":137,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["duplicados",{"_index":363,"title":{},"body":{"index.html":{}}}],["duplicate",{"_index":135,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["e",{"_index":160,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["e.message",{"_index":164,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["ejecutar",{"_index":451,"title":{},"body":{"index.html":{}}}],["ejemplos",{"_index":448,"title":{},"body":{"index.html":{}}}],["el",{"_index":330,"title":{},"body":{"index.html":{}}}],["en",{"_index":355,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":419,"title":{},"body":{"index.html":{}}}],["entorno",{"_index":392,"title":{},"body":{"index.html":{}}}],["env",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["envfilepath",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["envía",{"_index":366,"title":{},"body":{"index.html":{}}}],["err",{"_index":266,"title":{},"body":{"injectables/RedisService.html":{}}}],["error",{"_index":163,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["error('method",{"_index":244,"title":{},"body":{"injectables/RedisService.html":{}}}],["error(`routing",{"_index":282,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["errormessage",{"_index":161,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["eslint",{"_index":253,"title":{},"body":{"injectables/RedisService.html":{}}}],["eslint/no",{"_index":258,"title":{},"body":{"injectables/RedisService.html":{}}}],["est",{"_index":346,"title":{},"body":{"index.html":{}}}],["este",{"_index":332,"title":{},"body":{"index.html":{}}}],["evitar",{"_index":361,"title":{},"body":{"index.html":{}}}],["ex",{"_index":153,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["example",{"_index":89,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"index.html":{}}}],["existe",{"_index":144,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["exists",{"_index":130,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["express",{"_index":304,"title":{},"body":{"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["flotas",{"_index":344,"title":{},"body":{"index.html":{}}}],["forma",{"_index":334,"title":{},"body":{"index.html":{}}}],["framework",{"_index":324,"title":{},"body":{"index.html":{}}}],["function",{"_index":294,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":319,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gad",{"_index":431,"title":{},"body":{"index.html":{}}}],["geo",{"_index":134,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["geo.service",{"_index":199,"title":{},"body":{"controllers/GeoController.html":{}}}],["geo/geo.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["geo/geo.service",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["geocontroller",{"_index":48,"title":{"controllers/GeoController.html":{}},"body":{"modules/AppModule.html":{},"controllers/GeoController.html":{},"coverage.html":{}}}],["geolocalización",{"_index":331,"title":{},"body":{"index.html":{}}}],["geolocatión",{"_index":183,"title":{},"body":{"controllers/GeoController.html":{}}}],["geoparámetros",{"_index":422,"title":{},"body":{"index.html":{}}}],["geoservice",{"_index":43,"title":{"injectables/GeoService.html":{}},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{},"overview.html":{}}}],["getclient",{"_index":150,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":321,"title":{"index.html":{}},"body":{}}],["global",{"_index":224,"title":{},"body":{"modules/RedisModule.html":{}}}],["gps",{"_index":188,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{}}}],["gps'})@apiresponse({status",{"_index":184,"title":{},"body":{"controllers/GeoController.html":{}}}],["gps:${dto.deviceid",{"_index":127,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["handlegpsdata",{"_index":180,"title":{},"body":{"controllers/GeoController.html":{}}}],["handlegpsdata(@body",{"_index":205,"title":{},"body":{"controllers/GeoController.html":{}}}],["handlegpsdata(dto",{"_index":181,"title":{},"body":{"controllers/GeoController.html":{}}}],["hello",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":246,"title":{},"body":{"injectables/RedisService.html":{}}}],["http",{"_index":352,"title":{},"body":{"index.html":{}}}],["http://localhost:3001/api/docs",{"_index":440,"title":{},"body":{"index.html":{}}}],["http://localhost:3001/docs",{"_index":442,"title":{},"body":{"index.html":{}}}],["httpmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["httpservice",{"_index":105,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["identifier",{"_index":285,"title":{},"body":{"coverage.html":{}}}],["implementar",{"_index":358,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":245,"title":{},"body":{"injectables/RedisService.html":{}}}],["implements",{"_index":240,"title":{},"body":{"injectables/RedisService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["imports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["incluye",{"_index":443,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["injectable",{"_index":63,"title":{"injectables/AppService.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}},"body":{"injectables/AppService.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["injectables",{"_index":64,"title":{},"body":{"injectables/AppService.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"overview.html":{}}}],["installcompile",{"_index":410,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":162,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["interface",{"_index":99,"title":{"interfaces/Destination.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{}}}],["interfaces",{"_index":100,"title":{},"body":{"interfaces/Destination.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"overview.html":{}}}],["inválidos",{"_index":192,"title":{},"body":{"controllers/GeoController.html":{}}}],["ioredis",{"_index":239,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{}}}],["isglobal",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":80,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["isnumber",{"_index":77,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["isobject",{"_index":82,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["isstring",{"_index":81,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["jjw",{"_index":90,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["json.stringify(payload",{"_index":152,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["key",{"_index":126,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["la",{"_index":367,"title":{},"body":{"index.html":{}}}],["las",{"_index":398,"title":{},"body":{"index.html":{}}}],["lat",{"_index":73,"title":{},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["license",{"_index":465,"title":{},"body":{"properties.html":{}}}],["line",{"_index":256,"title":{},"body":{"injectables/RedisService.html":{}}}],["literal",{"_index":236,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["lng",{"_index":74,"title":{},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"index.html":{}}}],["localhost",{"_index":248,"title":{},"body":{"injectables/RedisService.html":{}}}],["location.dto",{"_index":102,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["locationdto",{"_index":88,"title":{"classes/LocationDto.html":{}},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{}}}],["los",{"_index":353,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mecanismo",{"_index":359,"title":{},"body":{"index.html":{}}}],["mediante",{"_index":373,"title":{},"body":{"index.html":{}}}],["member",{"_index":263,"title":{},"body":{"injectables/RedisService.html":{}}}],["message",{"_index":142,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["metadata",{"_index":311,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["microservicio",{"_index":327,"title":{},"body":{"index.html":{}}}],["microservicios",{"_index":338,"title":{},"body":{"index.html":{}}}],["minutos",{"_index":357,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":318,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["misma",{"_index":368,"title":{},"body":{"index.html":{}}}],["mode",{"_index":415,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["monitoreo",{"_index":341,"title":{},"body":{"index.html":{}}}],["módulo",{"_index":446,"title":{},"body":{"index.html":{}}}],["múltiples",{"_index":370,"title":{},"body":{"index.html":{}}}],["name",{"_index":195,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["nest",{"_index":323,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":349,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":302,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":303,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":87,"title":{},"body":{"classes/CoordinatesDto.html":{},"controllers/GeoController.html":{},"classes/LocationDto.html":{},"dependencies.html":{}}}],["new",{"_index":243,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["next",{"_index":255,"title":{},"body":{"injectables/RedisService.html":{}}}],["node.js",{"_index":382,"title":{},"body":{"index.html":{}}}],["npm",{"_index":386,"title":{},"body":{"index.html":{}}}],["number",{"_index":76,"title":{},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["o",{"_index":384,"title":{},"body":{"index.html":{}}}],["onmoduledestroy",{"_index":228,"title":{},"body":{"injectables/RedisService.html":{}}}],["optional",{"_index":196,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["origin",{"_index":95,"title":{"interfaces/Origin.html":{}},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"index.html":{}}}],["orm",{"_index":380,"title":{},"body":{"index.html":{}}}],["out",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["overview",{"_index":460,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":298,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":139,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["parameters",{"_index":194,"title":{},"body":{"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["parseint(process.env.redis_port",{"_index":250,"title":{},"body":{"injectables/RedisService.html":{}}}],["parte",{"_index":335,"title":{},"body":{"index.html":{}}}],["payload",{"_index":147,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["payloads",{"_index":449,"title":{},"body":{"index.html":{}}}],["persistencia",{"_index":376,"title":{},"body":{"index.html":{}}}],["por",{"_index":445,"title":{},"body":{"index.html":{}}}],["port",{"_index":249,"title":{},"body":{"injectables/RedisService.html":{}}}],["port=3001",{"_index":402,"title":{},"body":{"index.html":{}}}],["post",{"_index":197,"title":{},"body":{"controllers/GeoController.html":{},"index.html":{}}}],["post()@apioperation({summary",{"_index":182,"title":{},"body":{"controllers/GeoController.html":{}}}],["postgresql",{"_index":377,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":179,"title":{},"body":{"controllers/GeoController.html":{}}}],["prisma",{"_index":379,"title":{},"body":{"index.html":{}}}],["private",{"_index":112,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["process.env.redis_host",{"_index":247,"title":{},"body":{"injectables/RedisService.html":{}}}],["processgps",{"_index":207,"title":{},"body":{"injectables/GeoService.html":{}}}],["processgps(dto",{"_index":123,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["production",{"_index":417,"title":{},"body":{"index.html":{}}}],["project",{"_index":408,"title":{},"body":{"index.html":{}}}],["promise",{"_index":124,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["properties",{"_index":72,"title":{"properties.html":{}},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["proyecto",{"_index":397,"title":{},"body":{"index.html":{}}}],["pruebas",{"_index":450,"title":{},"body":{"index.html":{}}}],["raíz",{"_index":395,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["recibe",{"_index":351,"title":{},"body":{"index.html":{}}}],["reciente",{"_index":146,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["redis",{"_index":232,"title":{},"body":{"injectables/RedisService.html":{},"dependencies.html":{},"index.html":{}}}],["redis.service",{"_index":225,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis/redis.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_host=redis",{"_index":400,"title":{},"body":{"index.html":{}}}],["redis_port=6379",{"_index":401,"title":{},"body":{"index.html":{}}}],["redismodule",{"_index":41,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisservice",{"_index":103,"title":{"injectables/RedisService.html":{}},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{},"overview.html":{}}}],["reflect",{"_index":310,"title":{},"body":{"dependencies.html":{}}}],["registeralert",{"_index":173,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["registeralert(type",{"_index":211,"title":{},"body":{"injectables/GeoService.html":{}}}],["registrados",{"_index":189,"title":{},"body":{"controllers/GeoController.html":{}}}],["registrar",{"_index":176,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["registros",{"_index":362,"title":{},"body":{"index.html":{}}}],["repository",{"_index":326,"title":{},"body":{"index.html":{}}}],["requisitos",{"_index":381,"title":{},"body":{"index.html":{}}}],["reset",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}],["response",{"_index":278,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["response.data",{"_index":281,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["respuesta",{"_index":430,"title":{},"body":{"index.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["route",{"_index":109,"title":{"interfaces/Route.html":{}},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{},"index.html":{}}}],["routeresult",{"_index":154,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["routing",{"_index":166,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["routing_service_url=http://routing",{"_index":403,"title":{},"body":{"index.html":{}}}],["routingclient",{"_index":116,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["routingresoncez",{"_index":108,"title":{"interfaces/RoutingResonceZ.html":{}},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{}}}],["routingserviceclient",{"_index":42,"title":{"injectables/RoutingServiceClient.html":{}},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":411,"title":{},"body":{"index.html":{}}}],["ruta",{"_index":169,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["rxjs",{"_index":313,"title":{},"body":{"dependencies.html":{}}}],["saved",{"_index":172,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["service",{"_index":141,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["service:3002",{"_index":404,"title":{},"body":{"index.html":{}}}],["service:3003",{"_index":406,"title":{},"body":{"index.html":{}}}],["servicio",{"_index":333,"title":{},"body":{"index.html":{}}}],["set(key",{"_index":151,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["setjson",{"_index":229,"title":{},"body":{"injectables/RedisService.html":{}}}],["setjson(key",{"_index":234,"title":{},"body":{"injectables/RedisService.html":{}}}],["setup",{"_index":409,"title":{},"body":{"index.html":{}}}],["si",{"_index":364,"title":{},"body":{"index.html":{}}}],["siguientes",{"_index":399,"title":{},"body":{"index.html":{}}}],["sistema",{"_index":340,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["src/.../main.ts",{"_index":320,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":65,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/http/routing.service",{"_index":107,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["src/common/http/routing.service.ts",{"_index":269,"title":{},"body":{"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["src/common/http/routing.service.ts:16",{"_index":275,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["src/common/http/routing.service.ts:7",{"_index":273,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["src/geo/geo.controller.ts",{"_index":178,"title":{},"body":{"controllers/GeoController.html":{},"coverage.html":{}}}],["src/geo/geo.controller.ts:17",{"_index":193,"title":{},"body":{"controllers/GeoController.html":{}}}],["src/geo/geo.service.ts",{"_index":101,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"coverage.html":{}}}],["src/geo/geo.service.ts:34",{"_index":213,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/geo.service.ts:35",{"_index":209,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/geo.service.ts:47",{"_index":210,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/geo.service.ts:97",{"_index":212,"title":{},"body":{"injectables/GeoService.html":{}}}],["src/geo/location.dto.ts",{"_index":71,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"coverage.html":{}}}],["src/geo/location.dto.ts:12",{"_index":78,"title":{},"body":{"classes/CoordinatesDto.html":{}}}],["src/geo/location.dto.ts:13",{"_index":79,"title":{},"body":{"classes/CoordinatesDto.html":{}}}],["src/geo/location.dto.ts:20",{"_index":218,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/geo/location.dto.ts:26",{"_index":219,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/geo/location.dto.ts:32",{"_index":216,"title":{},"body":{"classes/LocationDto.html":{}}}],["src/main.ts",{"_index":293,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/redis/redis.module.ts",{"_index":223,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/redis/redis.service",{"_index":104,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["src/redis/redis.service.ts",{"_index":226,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/redis/redis.service.ts:27",{"_index":231,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:31",{"_index":233,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:6",{"_index":237,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:9",{"_index":230,"title":{},"body":{"injectables/RedisService.html":{}}}],["start",{"_index":413,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":416,"title":{},"body":{"index.html":{}}}],["start:proddeployment",{"_index":418,"title":{},"body":{"index.html":{}}}],["started",{"_index":322,"title":{"index.html":{}},"body":{}}],["starter",{"_index":325,"title":{},"body":{"index.html":{}}}],["statements",{"_index":286,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":110,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["success",{"_index":170,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["summary",{"_index":203,"title":{},"body":{"controllers/GeoController.html":{}}}],["superior",{"_index":385,"title":{},"body":{"index.html":{}}}],["support",{"_index":457,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":458,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":315,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["table",{"_index":297,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":296,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":444,"title":{},"body":{"index.html":{}}}],["test",{"_index":453,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":455,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.auditurl",{"_index":120,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.baseurl",{"_index":276,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.baseurl}/route",{"_index":280,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.client",{"_index":262,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.on('error",{"_index":265,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.client.quit",{"_index":268,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.configservice.get('audit_service_url",{"_index":121,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.configservice.get('redis_ttl",{"_index":118,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.configservice.get('routing_service_url",{"_index":277,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.geoservice.processgps(dto",{"_index":206,"title":{},"body":{"controllers/GeoController.html":{}}}],["this.httpservice.axiosref.post",{"_index":279,"title":{},"body":{"injectables/RoutingServiceClient.html":{}}}],["this.httpservice.axiosref.post(`${this.auditurl}/alert",{"_index":174,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.redisservice",{"_index":149,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.redisservice.getclient().get(key",{"_index":132,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.registeralert",{"_index":133,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.routingclient.calculateroute",{"_index":156,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["this.ttl",{"_index":117,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["throw",{"_index":242,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RoutingServiceClient.html":{}}}],["timestamp",{"_index":241,"title":{},"body":{"injectables/RedisService.html":{}}}],["transformer",{"_index":85,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"dependencies.html":{}}}],["true",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["try",{"_index":155,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["ttl",{"_index":113,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"index.html":{}}}],["type",{"_index":75,"title":{},"body":{"classes/CoordinatesDto.html":{},"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"classes/LocationDto.html":{},"interfaces/Origin.html":{},"injectables/RedisService.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{},"coverage.html":{}}}],["typescript",{"_index":257,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["ubicación",{"_index":145,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["ui",{"_index":316,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["un",{"_index":339,"title":{},"body":{"index.html":{}}}],["una",{"_index":336,"title":{},"body":{"index.html":{}}}],["undefined})@isobject()@validatenested()@type(undefined",{"_index":215,"title":{},"body":{"classes/LocationDto.html":{}}}],["unitarias",{"_index":452,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":158,"title":{},"body":{"interfaces/Destination.html":{},"controllers/GeoController.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{},"injectables/RoutingServiceClient.html":{}}}],["unlicensed",{"_index":466,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":259,"title":{},"body":{"injectables/RedisService.html":{}}}],["usando",{"_index":378,"title":{},"body":{"index.html":{}}}],["v16",{"_index":383,"title":{},"body":{"index.html":{}}}],["validación",{"_index":372,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":83,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{}}}],["validator",{"_index":84,"title":{},"body":{"classes/CoordinatesDto.html":{},"classes/LocationDto.html":{},"dependencies.html":{},"index.html":{}}}],["variables",{"_index":391,"title":{},"body":{"index.html":{}}}],["veces",{"_index":371,"title":{},"body":{"index.html":{}}}],["vehículo",{"_index":365,"title":{},"body":{"index.html":{}}}],["version",{"_index":463,"title":{},"body":{"properties.html":{}}}],["versión",{"_index":389,"title":{},"body":{"index.html":{}}}],["void",{"_index":238,"title":{},"body":{"injectables/RedisService.html":{}}}],["watch",{"_index":414,"title":{},"body":{"index.html":{}}}],["world",{"_index":68,"title":{},"body":{"injectables/AppService.html":{}}}],["y",{"_index":342,"title":{},"body":{"index.html":{}}}],["ya",{"_index":143,"title":{},"body":{"interfaces/Destination.html":{},"injectables/GeoService.html":{},"interfaces/Origin.html":{},"interfaces/Route.html":{},"interfaces/RoutingResonceZ.html":{}}}],["zoom",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRoutingServiceClient \n\nRoutingServiceClient \n\nRoutingServiceClient  -->\n\nAppModule->RoutingServiceClient \n\n\n\n\n\nGeoService\n\nGeoService\n\nAppModule -->\n\nGeoService->AppModule\n\n\n\n\n\nRoutingServiceClient\n\nRoutingServiceClient\n\nAppModule -->\n\nRoutingServiceClient->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GeoService\n                        \n                        \n                            RoutingServiceClient\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GeoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoutingServiceClient\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RedisModule } from './redis/redis.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { HttpModule } from '@nestjs/axios';\nimport { GeoService } from './geo/geo.service';\nimport { GeoController } from './geo/geo.controller';\nimport { RoutingServiceClient } from './common/http/routing.service';\n\n@Module({\n  imports: [\n    RedisModule,\n    ConfigModule.forRoot({\n      envFilePath: '.env',\n      isGlobal: true,\n    }),\n    HttpModule,\n  ],\n  controllers: [GeoController],\n  providers: [GeoService, RoutingServiceClient],\n  exports: [RoutingServiceClient],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoordinatesDto.html":{"url":"classes/CoordinatesDto.html","title":"class - CoordinatesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoordinatesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/location.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                lat\n                            \n                            \n                                    \n                                lng\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsObject,\n  ValidateNested,\n  IsNumber,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nclass CoordinatesDto {\n  @IsNumber() lat: number;\n  @IsNumber() lng: number;\n}\n\nexport class LocationDto {\n  @ApiProperty({ example: 'JJW-322' })\n  @IsString()\n  @IsNotEmpty()\n  deviceId: string;\n\n  @ApiProperty({ example: { lat: 4.123, lng: -74.123 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  origin: CoordinatesDto;\n\n  @ApiProperty({ example: { lat: 4.567, lng: -74.567 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  destination: CoordinatesDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Destination.html":{"url":"interfaces/Destination.html","title":"interface - Destination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Destination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lat\n                                        \n                                \n                                \n                                        \n                                            lng\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lng\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lng:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { RedisService } from 'src/redis/redis.service';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RoutingServiceClient } from 'src/common/http/routing.service';\n\nexport interface RoutingResonceZ {\n  deviceId: string;\n  origin: Origin;\n  destination: Destination;\n  route: Route[];\n  status: string;\n  cacheTTL: number;\n}\n\ninterface Origin {\n  lat: number;\n  lng: number;\n}\n\ninterface Destination {\n  lat: number;\n  lng: number;\n}\n\ninterface Route {\n  lat: number;\n  lng: number;\n}\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}-${dto.origin.lat}-${dto.origin.lng}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = (await this.routingClient.calculateRoute(\n        dto,\n      )) as unknown as RoutingResonceZ;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${errorMessage}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      console.error('Error al registrar alerta:', errorMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GeoController.html":{"url":"controllers/GeoController.html","title":"controller - GeoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GeoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                geo\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                handleGPSData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        handleGPSData\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGPSData(dto: LocationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Registrar geolocatión GPS'})@ApiResponse({status: 201, description: 'Datos GPS registrados correctamente.'})@ApiResponse({status: 400, description: 'Datos inválidos.'})\n                \n            \n\n                    \n                        \n                            Defined in src/geo/geo.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LocationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { GeoService } from './geo.service';\nimport { LocationDto } from './location.dto';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@Controller('geo')\nexport class GeoController {\n  constructor(private readonly geoService: GeoService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Registrar geolocatión GPS' })\n  @ApiResponse({\n    status: 201,\n    description: 'Datos GPS registrados correctamente.',\n  })\n  @ApiResponse({ status: 400, description: 'Datos inválidos.' })\n  async handleGPSData(@Body() dto: LocationDto) {\n    return await this.geoService.processGps(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GeoService.html":{"url":"injectables/GeoService.html","title":"injectable - GeoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GeoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                auditUrl\n                            \n                            \n                                    Private\n                                ttl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                processGps\n                            \n                            \n                                    Private\n                                    Async\n                                registerAlert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisService: RedisService, routingClient: RoutingServiceClient, httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/geo/geo.service.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        routingClient\n                                                  \n                                                        \n                                                                        RoutingServiceClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processGps\n                        \n                    \n                \n            \n            \n                \n                        \n                    processGps(dto: LocationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/geo/geo.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LocationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        registerAlert\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerAlert(type: string, message: string, source: string, deviceId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/geo/geo.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                source\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                deviceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        auditUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/geo/geo.service.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ttl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/geo/geo.service.ts:34\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { RedisService } from 'src/redis/redis.service';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RoutingServiceClient } from 'src/common/http/routing.service';\n\nexport interface RoutingResonceZ {\n  deviceId: string;\n  origin: Origin;\n  destination: Destination;\n  route: Route[];\n  status: string;\n  cacheTTL: number;\n}\n\ninterface Origin {\n  lat: number;\n  lng: number;\n}\n\ninterface Destination {\n  lat: number;\n  lng: number;\n}\n\ninterface Route {\n  lat: number;\n  lng: number;\n}\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}-${dto.origin.lat}-${dto.origin.lng}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = (await this.routingClient.calculateRoute(\n        dto,\n      )) as unknown as RoutingResonceZ;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${errorMessage}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      console.error('Error al registrar alerta:', errorMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocationDto.html":{"url":"classes/LocationDto.html","title":"class - LocationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/location.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                destination\n                            \n                            \n                                    \n                                    \n                                    \n                                deviceId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                origin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CoordinatesDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deviceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'JJW-322'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        origin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CoordinatesDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/geo/location.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsObject,\n  ValidateNested,\n  IsNumber,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nclass CoordinatesDto {\n  @IsNumber() lat: number;\n  @IsNumber() lng: number;\n}\n\nexport class LocationDto {\n  @ApiProperty({ example: 'JJW-322' })\n  @IsString()\n  @IsNotEmpty()\n  deviceId: string;\n\n  @ApiProperty({ example: { lat: 4.123, lng: -74.123 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  origin: CoordinatesDto;\n\n  @ApiProperty({ example: { lat: 4.567, lng: -74.567 } })\n  @IsObject()\n  @ValidateNested()\n  @Type(() => CoordinatesDto)\n  destination: CoordinatesDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Origin.html":{"url":"interfaces/Origin.html","title":"interface - Origin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Origin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lat\n                                        \n                                \n                                \n                                        \n                                            lng\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lng\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lng:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { RedisService } from 'src/redis/redis.service';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RoutingServiceClient } from 'src/common/http/routing.service';\n\nexport interface RoutingResonceZ {\n  deviceId: string;\n  origin: Origin;\n  destination: Destination;\n  route: Route[];\n  status: string;\n  cacheTTL: number;\n}\n\ninterface Origin {\n  lat: number;\n  lng: number;\n}\n\ninterface Destination {\n  lat: number;\n  lng: number;\n}\n\ninterface Route {\n  lat: number;\n  lng: number;\n}\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}-${dto.origin.lat}-${dto.origin.lng}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = (await this.routingClient.calculateRoute(\n        dto,\n      )) as unknown as RoutingResonceZ;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${errorMessage}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      console.error('Error al registrar alerta:', errorMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { RedisService } from './redis.service';\n\n@Global()\n@Module({\n  providers: [RedisService],\n  exports: [RedisService],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getClient\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                setJson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/redis/redis.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Redis\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setJson\n                        \n                    \n                \n            \n            \n                \nsetJson(key: string, arg1: literal type, ttl: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                arg1\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                    \n                        \n                                Defined in src/redis/redis.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleDestroy } from '@nestjs/common';\nimport Redis from 'ioredis';\n\n@Injectable()\nexport class RedisService implements OnModuleDestroy {\n  setJson(key: string, arg1: { deviceId: string; lat: number; lng: number; timestamp: number; }, ttl: number) {\n    throw new Error('Method not implemented.');\n  }\n  private client: Redis;\n\n  constructor() {\n    const host = process.env.REDIS_HOST || 'localhost';\n    const port = parseInt(process.env.REDIS_PORT || '6379', 10);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n    this.client = new Redis({\n      host,\n      port,\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    this.client.on('error', (err: Error) => {\n      console.error('Redis error:', err);\n    });\n  }\n\n  getClient(): Redis {\n    return this.client;\n  }\n\n  async onModuleDestroy() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    await this.client.quit();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Route.html":{"url":"interfaces/Route.html","title":"interface - Route","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Route\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lat\n                                        \n                                \n                                \n                                        \n                                            lng\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lng\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lng:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { RedisService } from 'src/redis/redis.service';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RoutingServiceClient } from 'src/common/http/routing.service';\n\nexport interface RoutingResonceZ {\n  deviceId: string;\n  origin: Origin;\n  destination: Destination;\n  route: Route[];\n  status: string;\n  cacheTTL: number;\n}\n\ninterface Origin {\n  lat: number;\n  lng: number;\n}\n\ninterface Destination {\n  lat: number;\n  lng: number;\n}\n\ninterface Route {\n  lat: number;\n  lng: number;\n}\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}-${dto.origin.lat}-${dto.origin.lng}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = (await this.routingClient.calculateRoute(\n        dto,\n      )) as unknown as RoutingResonceZ;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${errorMessage}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      console.error('Error al registrar alerta:', errorMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RoutingResonceZ.html":{"url":"interfaces/RoutingResonceZ.html","title":"interface - RoutingResonceZ","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RoutingResonceZ\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/geo/geo.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cacheTTL\n                                        \n                                \n                                \n                                        \n                                            destination\n                                        \n                                \n                                \n                                        \n                                            deviceId\n                                        \n                                \n                                \n                                        \n                                            origin\n                                        \n                                \n                                \n                                        \n                                            route\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheTTL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheTTL:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         Destination\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Destination\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deviceId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        origin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        origin:         Origin\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Origin\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:         Route[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Route[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LocationDto } from './location.dto';\nimport { RedisService } from 'src/redis/redis.service';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { RoutingServiceClient } from 'src/common/http/routing.service';\n\nexport interface RoutingResonceZ {\n  deviceId: string;\n  origin: Origin;\n  destination: Destination;\n  route: Route[];\n  status: string;\n  cacheTTL: number;\n}\n\ninterface Origin {\n  lat: number;\n  lng: number;\n}\n\ninterface Destination {\n  lat: number;\n  lng: number;\n}\n\ninterface Route {\n  lat: number;\n  lng: number;\n}\n\n@Injectable()\nexport class GeoService {\n  private ttl: number;\n  private auditUrl: string;\n\n  constructor(\n    private readonly redisService: RedisService,\n    private readonly routingClient: RoutingServiceClient,\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.ttl = this.configService.get('REDIS_TTL') ?? 300;\n    this.auditUrl = this.configService.get('AUDIT_SERVICE_URL') ?? '';\n  }\n\n  async processGps(dto: LocationDto): Promise {\n    const key = `gps:${dto.deviceId}-${dto.origin.lat}-${dto.origin.lng}`;\n    const exists = await this.redisService.getClient().get(key);\n\n    if (exists) {\n      await this.registerAlert(\n        'geo-duplicate-detected',\n        `Duplicado detectado para ${dto.deviceId}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'duplicate', message: 'Ya existe ubicación reciente' };\n    }\n\n    const payload = {\n      deviceId: dto.deviceId,\n      lat: dto.origin.lat,\n      lng: dto.origin.lng,\n      destination: dto.destination,\n    };\n\n    await this.redisService\n      .getClient()\n      .set(key, JSON.stringify(payload), 'EX', this.ttl);\n\n    let routeResult;\n    try {\n      routeResult = (await this.routingClient.calculateRoute(\n        dto,\n      )) as unknown as RoutingResonceZ;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      await this.registerAlert(\n        'routing-error',\n        `Error al calcular ruta: ${errorMessage}`,\n        'geo-service',\n        dto.deviceId,\n      );\n      return { status: 'error', message: 'Error al calcular ruta' };\n    }\n\n    return {\n      status: 'success',\n      data: {\n        saved: true,\n        route: routeResult,\n      },\n    };\n  }\n\n  private async registerAlert(\n    type: string,\n    message: string,\n    source: string,\n    deviceId: string,\n  ) {\n    try {\n      await this.httpService.axiosRef.post(`${this.auditUrl}/alert`, {\n        type,\n        message,\n        source,\n        deviceId,\n      });\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      console.error('Error al registrar alerta:', errorMessage);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutingServiceClient.html":{"url":"injectables/RoutingServiceClient.html","title":"injectable - RoutingServiceClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutingServiceClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/http/routing.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                calculateRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/http/routing.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        calculateRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateRoute(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/http/routing.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/http/routing.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RoutingServiceClient {\n  private readonly baseUrl: string;\n\n  constructor(\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService,\n  ) {\n    this.baseUrl = this.configService.get('ROUTING_SERVICE_URL') ?? '';\n  }\n\n  async calculateRoute(payload: {\n    deviceId: string;\n    origin: { lat: number; lng: number };\n    destination: { lat: number; lng: number };\n  }) {\n    try {\n      const response = await this.httpService.axiosRef.post(\n        `${this.baseUrl}/route`,\n        payload,\n      );\n      return response.data;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : 'Error desconocido';\n      throw new Error(`Routing service error: ${errorMessage}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/http/routing.service.ts\n            \n            injectable\n            RoutingServiceClient\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/geo/geo.controller.ts\n            \n            controller\n            GeoController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            injectable\n            GeoService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            interface\n            Destination\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            interface\n            Origin\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            interface\n            Route\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/geo/geo.service.ts\n            \n            interface\n            RoutingResonceZ\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/geo/location.dto.ts\n            \n            class\n            CoordinatesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/geo/location.dto.ts\n            \n            class\n            LocationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^4.0.0\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.1.4\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ioredis : ^5.6.1\n        \n            redis : ^4.7.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescription\nNest framework TypeScript starter repository.\nMicroservicio de auditoría\nEl microservicio de Geolocalización :\nEste servicio forma parte de una arquitectura de microservicios para un sistema de monitoreo y control de flotas, y actúa servicio de geolocalización.\nEstá construido con NestJS.\nCaracterísticas\n\nRecibe datos GPS (HTTP POST) y los almacena en Redis (TTL: 5 minutos). \nImplementar un mecanismo de duplicación para evitar registros duplicados si un vehículo envía la misma coordenada múltiples veces. \nValidación de datos mediante DTOs y class-validator.\nSwagger API Documentation.\nPersistencia en PostgreSQL usando Prisma ORM.\n\nRequisitos\n\nNode.js (v16 o superior)\nnpm\nDocker y Docker Compose (para la versión containerizada)\n\nVariables de entorno\nCrear un archivo .env en la raíz del proyecto con las siguientes variables:\nExample :REDIS_HOST=redis\nREDIS_PORT=6379\nPORT=3001\nROUTING_SERVICE_URL=http://routing-service:3002\nAUDIT_SERVICE_URL=http://audit-service:3003\nDownload the repository\nExample :$Project setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodDeployment\nEndpoints\nAudit Alerts\nExample :POST /geoParámetros de consulta:\nExample :{\n    \"deviceId\": \"AZD-223\",\n    \"origin\": {\n        \"lat\": 5.5225,\n        \"lng\": 8.2225\n    },\n    \"destination\": {\n        \"lat\": 4.1225,\n        \"lng\": 10.1225\n    }\n}Respuesta:\nExample :{\n    \"status\": \"success\",\n    \"data\": {\n        \"saved\": true,\n        \"route\": {\n            \"deviceId\": \"GaD-223\",\n            \"origin\": {\n                \"lat\": 55.5225,\n                \"lng\": 85.2225\n            },\n            \"destination\": {\n                \"lat\": 22.1225,\n                \"lng\": 49.1225\n            },\n            \"route\": [\n                {\n                    \"lat\": 38.8225,\n                    \"lng\": 67.1725\n                }\n            ],\n            \"status\": \"success\",\n            \"cacheTTL\": 300\n        }\n    }\n}Documentación API\nLa documentación de la API está disponible en Swagger UI:\nhttp://localhost:3001/api/docs\nLa documentación de la API está disponible en CompoDoc UI:\nhttp://localhost:3001/docs/\nIncluye:\nTags por módulo (Alert)\nEjemplos de payloads\nPruebas\nExample :# Ejecutar pruebas unitarias\nnpm run test\n\n# Ejecutar pruebas con cobertura\nnpm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRoutingServiceClient \n\nRoutingServiceClient \n\nRoutingServiceClient  -->\n\nAppModule->RoutingServiceClient \n\n\n\n\n\nGeoService\n\nGeoService\n\nAppModule -->\n\nGeoService->AppModule\n\n\n\n\n\nRoutingServiceClient\n\nRoutingServiceClient\n\nAppModule -->\n\nRoutingServiceClient->AppModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
